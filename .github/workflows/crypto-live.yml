# ================================
# File: .github/workflows/crypto-live.yml
# ================================
name: Crypto Live

on:
  workflow_dispatch:
  # Uncomment to enable twice‑daily schedule (07:00 & 15:00 PT ≈ 14:00 & 22:00 UTC during DST)
  # schedule:
  #   - cron: '0 14,22 * * *'

# Env knobs — tweak here without editing code
env:
  PYTHON_VERSION: "3.11"
  DRY_RUN: "true"           # change to "false" when ready to place live orders
  TRADE_AMOUNT: "10"        # per trade amount (quote currency)
  DAILY_CAP: "50"           # max total spent per run/day
  DROP_PCT: "2.0"           # buy trigger: previous→current drop %
  SYMBOLS: "BTC/USDT,ETH/USDT"  # comma‑separated CCXT symbols

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt yfinance
          fi

      - name: Show runtime knobs
        run: |
          echo "DRY_RUN=$DRY_RUN"
          echo "TRADE_AMOUNT=$TRADE_AMOUNT"
          echo "DAILY_CAP=$DAILY_CAP"
          echo "DROP_PCT=$DROP_PCT"
          echo "SYMBOLS=$SYMBOLS"

      - name: Run trader
        env:
          DRY_RUN: ${{ env.DRY_RUN }}
          TRADE_AMOUNT: ${{ env.TRADE_AMOUNT }}
          DAILY_CAP: ${{ env.DAILY_CAP }}
          DROP_PCT: ${{ env.DROP_PCT }}
          SYMBOLS: ${{ env.SYMBOLS }}
        run: |
          python -V
          python main.py

# ================================
# File: main.py (full, synced with workflow env knobs)
# ================================
import os
import sys
import logging
import ccxt
import yfinance as yf

# ========== Logging Setup ==========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# ========== Env Configs ==========
DRY_RUN = os.getenv("DRY_RUN", "true").lower() == "true"
TRADE_AMOUNT = float(os.getenv("TRADE_AMOUNT", "10"))
DAILY_CAP = float(os.getenv("DAILY_CAP", "50"))
DROP_PCT = float(os.getenv("DROP_PCT", "2.0"))  # buy trigger % drop
SYMBOLS = [s.strip() for s in os.getenv("SYMBOLS", "BTC/USDT,ETH/USDT").split(",") if s.strip()]

# ========== Broker Setup ==========
def get_exchange():
    # Kraken via CCXT (public only when DRY_RUN; add keys later for live)
    exchange = ccxt.kraken({
        "enableRateLimit": True,
    })
    return exchange

# ========== Data Fetch ==========
def get_latest_price(symbol: str):
    base, quote = symbol.split("/")
    ticker = yf.Ticker(base + "-USD")
    hist = ticker.history(period="1d", interval="1m")
    if hist.empty:
        raise ValueError(f"No price data for {symbol}")
    return float(hist["Close"].iloc[-1])

# ========== Trading Logic ==========
def should_buy(symbol: str, drop_pct: float) -> bool:
    base, quote = symbol.split("/")
    ticker = yf.Ticker(base + "-USD")
    hist = ticker.history(period="5d", interval="1h")
    if len(hist) < 2:
        logger.info(f"{symbol}: not enough data to evaluate gate")
        return False
    last = float(hist["Close"].iloc[-1])
    prev = float(hist["Close"].iloc[-2])
    change_pct = (last - prev) / prev * 100
    logger.info(f"{symbol}: change {change_pct:.2f}% (gate {drop_pct}%)")
    return change_pct <= -drop_pct

def place_order(exchange, symbol: str, side: str, amount: float):
    if DRY_RUN:
        logger.info(f"[DRY RUN] {side} {amount} {symbol}")
        return
    try:
        order = exchange.create_market_order(symbol, side, amount)
        logger.info(f"Executed order: {order}")
    except Exception as e:
        logger.error(f"Order failed for {symbol}: {e}")

# ========== Alarm Hook ==========
def post_alarm(message: str):
    # Placeholder for Slack/email later
    logger.warning(f"ALARM: {message}")

# ========== Main ==========

def main():
    logger.info("=== START TRADING OUTPUT ===")
    exchange = get_exchange()
    spent_today = 0.0

    for symbol in SYMBOLS:
        try:
            price = get_latest_price(symbol)
            logger.info(f"{symbol} latest price: {price:.2f}")

            if should_buy(symbol, DROP_PCT):
                if spent_today + TRADE_AMOUNT > DAILY_CAP:
                    post_alarm(f"Daily cap {DAILY_CAP} reached, skipping {symbol}")
                    continue
                place_order(exchange, symbol, "buy", TRADE_AMOUNT)
                spent_today += TRADE_AMOUNT
            else:
                logger.info(f"No buy signal for {symbol}")

        except Exception as e:
            logger.error(f"Error with {symbol}: {e}")

    logger.info(f"Total spent today: {spent_today:.2f} (cap {DAILY_CAP})")
    logger.info("=== END TRADING OUTPUT ===")

if __name__ == "__main__":
    main()
