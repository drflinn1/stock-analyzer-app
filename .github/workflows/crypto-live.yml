name: Crypto Live — Guarded

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "Simulate only (true/false) — ignored if LIVE_CONFIRM != I_UNDERSTAND"
        required: true
        default: "true"
      LIVE_CONFIRM:
        description: 'Type EXACTLY: I_UNDERSTAND to allow live orders'
        required: false
        default: ""
      EXCHANGE_ID:
        description: "CCXT exchange id (e.g., kraken, binanceus)"
        required: true
        default: "kraken"
      UNIVERSE_MODE:
        description: "auto or whitelist"
        required: true
        default: "whitelist"
      WHITELIST:
        description: "If UNIVERSE_MODE=whitelist"
        required: true
        default: "BTC/USD,ETH/USD,SOL/USD,DOGE/USD"
      TOPK:
        description: "If auto-pick, how many symbols to scan"
        required: true
        default: "8"
      USD_PER_TRADE:
        description: "Notional USD per buy"
        required: true
        default: "10"
      MAX_ENTRIES_PER_RUN:
        description: "New buys per run"
        required: true
        default: "1"
      MAX_POSITIONS:
        description: "Cap concurrent positions"
        required: true
        default: "6"
      CONFIG:
        description: "Advanced JSON (TP/SL/TRAIL/LOSSCAP/RESERVE/AVOID_STABLES)"
        required: true
        default: '{"TAKE_PROFIT_PCT":0.035,"STOP_LOSS_PCT":0.020,"TRAIL_PCT":0.025,"DAILY_LOSS_CAP_PCT":-0.02,"RESERVE_USD":100,"AVOID_STABLES":true}'

  # Every 15 minutes
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: read

concurrency:
  group: crypto-live-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 14

    env:
      # Secrets
      KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

      # Inputs (schedule runs provide these as empty strings)
      DRY_RUN: ${{ inputs.DRY_RUN }}
      LIVE_CONFIRM: ${{ inputs.LIVE_CONFIRM }}
      EXCHANGE_ID: ${{ inputs.EXCHANGE_ID }}
      UNIVERSE_MODE: ${{ inputs.UNIVERSE_MODE }}
      WHITELIST: ${{ inputs.WHITELIST }}
      TOPK: ${{ inputs.TOPK }}
      USD_PER_TRADE: ${{ inputs.USD_PER_TRADE }}
      MAX_ENTRIES_PER_RUN: ${{ inputs.MAX_ENTRIES_PER_RUN }}
      MAX_POSITIONS: ${{ inputs.MAX_POSITIONS }}
      CONFIG: ${{ inputs.CONFIG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py311-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-py311-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt==4.4.38 pandas==2.2.2
          fi

      - name: Parse CONFIG → env
        run: |
          python - << 'PY'
          import os, json
          dflt = {"TAKE_PROFIT_PCT":0.035,"STOP_LOSS_PCT":0.020,"TRAIL_PCT":0.025,"DAILY_LOSS_CAP_PCT":-0.02,"RESERVE_USD":100,"AVOID_STABLES":True}
          raw = os.getenv("CONFIG","") or ""
          try:
              cfg = {**dflt, **json.loads(raw)}
          except Exception:
              cfg = dflt
          with open(os.environ["GITHUB_ENV"],"a",encoding="utf-8") as f:
              for k in ("TAKE_PROFIT_PCT","STOP_LOSS_PCT","TRAIL_PCT","DAILY_LOSS_CAP_PCT","RESERVE_USD","AVOID_STABLES"):
                  v = cfg[k]
                  if isinstance(v, bool): v = str(v).lower()
                  f.write(f"{k}={v}\n")
          print("CONFIG applied:", cfg)
          PY

      - name: Show inputs
        run: |
          echo "event=${{ github.event_name }}"
          echo "DRY_RUN=${DRY_RUN}"
          echo "LIVE_CONFIRM=${LIVE_CONFIRM}"
          echo "EXCHANGE_ID=${EXCHANGE_ID}"
          echo "UNIVERSE_MODE=${UNIVERSE_MODE}"
          echo "WHITELIST=${WHITELIST}"

      - name: Run Crypto Live
        run: |
          python -u main.py

      - name: Upload KPI history
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kpi-history
          path: |
            .state/kpi_history.csv
            .state/summary_last.txt
            .state/positions.json
          if-no-files-found: ignore
