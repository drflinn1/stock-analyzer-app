name: Crypto Live (Every 15 min) — LIVE

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: '"false" = live trading, "true" = simulate'
        required: true
        default: "false"
      PRIVATE_API:
        description: 'Use private endpoints (balance/orders) — "true"/"false"'
        required: true
        default: "true"
      PER_TRADE_USD:
        description: 'Spend per buy (USD)'
        required: true
        default: "10"
      DAILY_CAP_USD:
        description: 'Max total spend per run/day slice (USD)'
        required: true
        default: "15"
      DROP_PCT:
        description: 'Require 5m change <= -DROP_PCT (e.g., 0.60 for -0.60%)'
        required: true
        default: "0.60"
      RSI_MAX:
        description: 'Only buy if RSI <= RSI_MAX'
        required: true
        default: "60"
      TOP_N:
        description: 'Top N USD pairs by 24h volume to scan'
        required: true
        default: "30"
      MIN_USD_VOL:
        description: 'Minimum 24h USD quote volume'
        required: true
        default: "1000000"
      # Some versions of your code use TF; some use TIMEFRAME — we set both.
      TF:
        description: 'Candle timeframe (alias for TIMEFRAME)'
        required: true
        default: "5m"
      TIMEFRAME:
        description: 'Candle timeframe'
        required: true
        default: "5m"
      # If empty, code will switch to auto-universe; if you want manual, comma-separate pairs
      UNIVERSE:
        description: 'Optional manual universe (e.g., BTC/USD,ETH/USD); leave empty for auto'
        required: false
        default: ""

  schedule:
    - cron: "*/15 * * * *"

concurrency:
  group: crypto-live-15m
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  run:
    name: Run trader (LIVE)
    runs-on: ubuntu-latest

    env:
      # --- Runtime ---
      PYTHON_VERSION: "3.11"
      EXCHANGE: "kraken"

      # --- Live/Paused + private endpoints ---
      DRY_RUN:      ${{ inputs.DRY_RUN      || 'false' }}
      PRIVATE_API:  ${{ inputs.PRIVATE_API  || 'true'  }}

      # --- Exchange credentials (must exist in repo secrets) ---
      API_KEY:     ${{ secrets.KRAKEN_API_KEY }}
      API_SECRET:  ${{ secrets.KRAKEN_API_SECRET }}

      # --- Safety caps ---
      PER_TRADE_USD: ${{ inputs.PER_TRADE_USD || '10' }}
      DAILY_CAP_USD: ${{ inputs.DAILY_CAP_USD || '15' }}

      # --- Strategy knobs ---
      TOP_N:        ${{ inputs.TOP_N        || '30' }}
      MIN_USD_VOL:  ${{ inputs.MIN_USD_VOL  || '1000000' }}
      TF:           ${{ inputs.TF           || '5m' }}
      TIMEFRAME:    ${{ inputs.TIMEFRAME    || '5m' }}
      RSI_LEN:      "14"
      RSI_MAX:      ${{ inputs.RSI_MAX      || '60' }}
      DROP_PCT:     ${{ inputs.DROP_PCT     || '0.60' }}
      UNIVERSE:     ${{ inputs.UNIVERSE     || '' }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt

      - name: Sanity — Keys present if live
        run: |
          if [ "${DRY_RUN}" != "true" ] && [ "${PRIVATE_API}" = "true" ]; then
            if [ -z "${API_KEY}" ] || [ -z "${API_SECRET}" ]; then
              echo "ERROR: Live+private requested but KRAKEN_API_KEY / KRAKEN_API_SECRET not set."
              exit 1
            fi
          fi
          echo "Sanity OK."

      - name: Run trader (LIVE)
        shell: bash
        run: |
          set -e
          echo "=== START TRADING OUTPUT ==="
          python main.py
          echo "=== END TRADING OUTPUT ==="
