name: Crypto Live

on:
  workflow_dispatch:

env:
  # Python
  PYTHON_VERSION: "3.11"

  # --- Stop-loss knobs ------------------------
  STOP_LOSS_PCT: "2.0"               # % below filled buy price
  STOP_LOSS_USE_LIMIT: "true"        # true = stop-loss-LIMIT; false = stop-loss (market)
  STOP_LOSS_LIMIT_OFFSET_BP: "10"    # 10 bp (0.10%) under the stop trigger

  # --- Live knobs -----------------------------
  DRY_RUN: "false"                    # set "true" for simulation
  TRADE_AMOUNT: "25"                  # spend per buy in *quote* currency
  DAILY_CAP: "75"

  # --- Selection / universe -------------------
  DROP_PCT: "2.0"
  UNIVERSE_SIZE: "100"
  PREFERRED_QUOTES: "USD,USDT"

  # (Optional legacy knobs you had before â€” safe to keep, ignored by current runner)
  # TIMEFRAME: "1m"
  # FORCE_BUY: "true"
  # UNIVERSE: "AUTO"
  # MAX_SYMBOLS: "100"
  # MIN_LAST_CANDLE_USD: "0"
  # EXCLUDE: "USDT/USDT,USD/USDT"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # If requirements.txt exists, install it; then ensure ccxt is present.
          (test -f requirements.txt && pip install -r requirements.txt) || true
          pip install ccxt

      - name: Show runtime knobs
        run: |
          echo "DRY_RUN=${DRY_RUN}"
          echo "TRADE_AMOUNT=${TRADE_AMOUNT}"
          echo "DAILY_CAP=${DAILY_CAP}"
          echo "STOP_LOSS_PCT=${STOP_LOSS_PCT}"
          echo "STOP_LOSS_USE_LIMIT=${STOP_LOSS_USE_LIMIT}"
          echo "STOP_LOSS_LIMIT_OFFSET_BP=${STOP_LOSS_LIMIT_OFFSET_BP}"
          echo "DROP_PCT=${DROP_PCT}"
          echo "UNIVERSE_SIZE=${UNIVERSE_SIZE}"
          echo "PREFERRED_QUOTES=${PREFERRED_QUOTES}"

      - name: Run trader (Kraken)
        env:
          # pass through knobs explicitly (okay to rely on inherited env too)
          DRY_RUN: ${{ env.DRY_RUN }}
          TRADE_AMOUNT: ${{ env.TRADE_AMOUNT }}
          DAILY_CAP: ${{ env.DAILY_CAP }}
          STOP_LOSS_PCT: ${{ env.STOP_LOSS_PCT }}
          STOP_LOSS_USE_LIMIT: ${{ env.STOP_LOSS_USE_LIMIT }}
          STOP_LOSS_LIMIT_OFFSET_BP: ${{ env.STOP_LOSS_LIMIT_OFFSET_BP }}
          DROP_PCT: ${{ env.DROP_PCT }}
          UNIVERSE_SIZE: ${{ env.UNIVERSE_SIZE }}
          PREFERRED_QUOTES: ${{ env.PREFERRED_QUOTES }}

          # --- Exchange credentials (map to names the code expects) ---
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_SECRET:  ${{ secrets.KRAKEN_API_SECRET }}
          # KRAKEN_PASSWORD: ${{ secrets.KRAKEN_PASSWORD }}  # not needed for spot; leave unset

        run: |
          python -V
          python main.py
