name: Crypto Live (Every 15 min - Guarded)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch: {}

jobs:
  trade:
    runs-on: ubuntu-latest
    env:
      # --- Core bot env (adjust as needed) ---
      EXCHANGE: kraken
      DRY_RUN: "true"                 # set "false" when you go live
      UNIVERSE_MODE: "auto"
      TOP_K: "4"
      QUOTE_CCY: "USD"
      DAILY_LOSS_CAP_PCT: "3"
      MAX_DAILY_ENTRIES: "3"
      RESERVE_USD: "100"

      # --- Dust Sweeper knobs ---
      SWEEP_ENABLE: "true"
      SWEEP_DRY_RUN: "true"           # flip to "false" to actually sell dust
      SWEEP_MIN_NOTIONAL_USD: "1.00"
      SWEEP_WHITELIST: "BTC,ETH,SOL,DOGE,USD,USDT,USDC"

      # Keys (must be present in repo secrets)
      KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas

      - name: Run Crypto Bot
        shell: bash
        run: |
          echo "Starting Crypto Bot (adaptive launcher)..."
          printf '%s\n' \
            'import os, sys, importlib, traceback' \
            '' \
            'candidates = [' \
            "    ('trader.main', 'main')," \
            "    ('trader.engine', 'main')," \
            "    ('trader.crypto_engine', 'main')," \
            "    ('main', 'main')," \
            ']' \
            '' \
            'def try_run(mod_name, func_name):' \
            '    try:' \
            '        mod = importlib.import_module(mod_name)' \
            '    except ModuleNotFoundError:' \
            '        print(f"[skip] Module not found: {mod_name}")' \
            '        return False' \
            '    fn = getattr(mod, func_name, None)' \
            '    if callable(fn):' \
            '        print(f"[go] Launching {mod_name}.{func_name}()")' \
            '        fn()' \
            '        return True' \
            '    if hasattr(mod, "run") and callable(getattr(mod, "run")):' \
            '        print(f"[go] Launching {mod_name}.run()")' \
            '        mod.run()' \
            '        return True' \
            '    print(f"[skip] {mod_name} loaded but no {func_name}() or run() entrypoint")' \
            '    return False' \
            '' \
            'ok = False' \
            'for m, f in candidates:' \
            '    if try_run(m, f):' \
            '        ok = True' \
            '        break' \
            '' \
            'if not ok:' \
            '    print("[error] No known entrypoint found. Looked for:")' \
            '    for m, f in candidates:' \
            '        print(f"  - {m}.{f}()")' \
            '    try:' \
            '        import pathlib' \
            '        for p in pathlib.Path(".").rglob("*.py"):' \
            '            print("  ", p)' \
            '    except Exception:' \
            '        traceback.print_exc()' \
            '    sys.exit(1)' \
            > run_bot.py
          python run_bot.py

      - name: KPI Artifact (optional)
        run: |
          echo "timestamp,pl_percent" > kpi.csv
          date -u +%FT%TZ | awk '{print $0",0.00"}' >> kpi.csv
        continue-on-error: true

      # ---- DUST SWEEPER (after trading) ----
      - name: Dust Sweeper
        if: env.SWEEP_ENABLE == 'true'
        shell: bash
        run: |
          echo "Dust Sweeper (dry-run=${SWEEP_DRY_RUN})"
          printf '%s\n' \
            'import os' \
            'import ccxt' \
            '' \
            'def as_bool(v, default=False):' \
            '    if v is None: return default' \
            '    return str(v).strip().lower() in ("1","true","yes","on")' \
            '' \
            'ex = ccxt.kraken({' \
            "    'apiKey': os.getenv('KRAKEN_API_KEY','')," \
            "    'secret': os.getenv('KRAKEN_API_SECRET','')," \
            '})' \
            'dry_run = as_bool(os.getenv("SWEEP_DRY_RUN","true"), True)' \
            'min_usd = float(os.getenv("SWEEP_MIN_NOTIONAL_USD","1.0"))' \
            'keep = set([s.strip().upper() for s in os.getenv("SWEEP_WHITELIST","").split(",") if s.strip()])' \
            '' \
            'print(f"Connecting to Kraken... dry_run={dry_run}, min_usd={min_usd}, keep={sorted(keep)}")' \
            '' \
            'bal = ex.fetch_balance()' \
            'ex.load_markets()' \
            '' \
            '# Build quick USD prices' \
            'prices = {}' \
            'for m in ex.markets.values():' \
            '    if m.get("quote") == "USD":' \
            '        base = (m.get("base") or "").upper()' \
            '        if not base:' \
            '            continue' \
            '        try:' \
            '            t = ex.fetch_ticker(m["symbol"])' \
            '            prices[base] = float(t.get("last") or 0.0)' \
            '        except Exception:' \
            '            pass' \
            '' \
            'sells = []' \
            'for asset, qty in (bal.get("total") or {}).items():' \
            '    qty = float(qty or 0)' \
            '    sym = (asset or "").upper()' \
            '    if qty <= 0 or not sym:' \
            '        continue' \
            '    if sym in keep:' \
            '        continue' \
            '' \
            '    px = prices.get(sym, 0.0)' \
            '    notional = qty * px if px > 0 else 0.0' \
            '    if px == 0.0:' \
            '        print(f"[?] No USD price for {sym}; qty={qty}. Considering as potential dust.")' \
            '' \
            '    if notional < min_usd:' \
            '        market = None' \
            '        for q in ("USD","USDT","USDC"):' \
            '            pair = f"{sym}/{q}"' \
            '            if pair in ex.markets:' \
            '                market = pair' \
            '                break' \
            '        if market:' \
            '            sells.append((sym, qty, market, notional))' \
            '        else:' \
            '            print(f"[skip] No market to exit {sym} to USD/USDT/USDC; leaving as-is.")' \
            '' \
            'if not sells:' \
            '    print("No dust found below threshold.")' \
            'else:' \
            '    print(f"Found {len(sells)} dust positions:")' \
            '    for sym, qty, market, notional in sells:' \
            '        print(f" - {sym}: qty={qty:.8f}, notional~${notional:.2f}, market={market}")' \
            '    if dry_run:' \
            '        print("DRY-RUN: No sell orders will be sent.")' \
            '    else:' \
            '        for sym, qty, market, _ in sells:' \
            '            try:' \
            '                print(f"Submitting market sell: {market} size={qty}")' \
            "                ex.create_order(market, 'market', 'sell', qty)" \
            '            except Exception as e:' \
            '                print(f"[error] Sell {market} size={qty}: {e}")' \
            > sweep.py
          python sweep.py

      - name: Done
        run: echo "Run complete."
