name: Crypto Live â€” Every 15 min (Guarded)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "Override dry-run (ON/OFF). Leave blank to use default below."
        required: false
        default: ""
      RUN_SWITCH:
        description: "Master switch (ON/OFF). Leave blank to use default below."
        required: false
        default: ""

concurrency:
  group: crypto-live-${{ github.ref }}
  cancel-in-progress: true

jobs:
  live:
    runs-on: ubuntu-latest

    env:
      # ===== Master switches =====
      RUN_SWITCH: ${{ inputs.RUN_SWITCH || 'ON' }}
      DRY_RUN:    ${{ inputs.DRY_RUN    || 'OFF' }}   # live by default for scheduled runs

      # ===== Night-mode sizing / risk knobs =====
      MAX_POSITIONS: "6"
      MAX_BUYS_PER_RUN: "1"
      SL_PCT: "0.04"
      TRAIL_PCT: "0.035"
      TP1_PCT: "0.05"
      TP1_SIZE: "0.25"
      RESERVE_CASH_PCT: "0.10"
      DAILY_NOTIONAL_CAP_USD: "0"

      # ===== Universe / rotation =====
      USD_ONLY: "true"
      WHITELIST: "BTC/USD,ETH/USD,SOL/USD,DOGE/USD"
      ROTATE_WHEN_CASH_SHORT: "true"
      ROTATE_WHEN_FULL: "false"
      DUST_MIN_USD: "2"

      # ===== Logging / misc =====
      BOT_NAME: "crypto-live"
      PYTHONUNBUFFERED: "1"

      # ===== Slack (optional, safe to leave empty) =====
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt pandas requests matplotlib
          fi

      - name: Compute risk
        id: risk
        shell: bash
        run: |
          SIGNAL="OFF"
          if [ -f ".state/risk_signal.txt" ]; then
            RAW=$(cat .state/risk_signal.txt | tr -d '\r' | tr '[:lower:]' '[:upper:]')
            if [ "$RAW" = "ON" ] || [ "$RAW" = "OFF" ]; then
              SIGNAL="$RAW"
            fi
          fi
          echo "risk=$SIGNAL" >> "$GITHUB_OUTPUT"
          echo "Gate Summary â†’ Risk: $SIGNAL | RUN_SWITCH: ${RUN_SWITCH} | DRY_RUN: ${DRY_RUN}"

      - name: Daily cap info (noop)
        if: ${{ always() }}
        run: |
          echo "DAILY_NOTIONAL_CAP_USD=${DAILY_NOTIONAL_CAP_USD} (0 means disabled; enforce inside main.py as well)"

      - name: Run bot (main.py)
        if: ${{ env.RUN_SWITCH == 'ON' && steps.risk.outputs.risk == 'ON' }}
        env:
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          # pass-through
          RUN_SWITCH: ${{ env.RUN_SWITCH }}
          DRY_RUN: ${{ env.DRY_RUN }}
          MAX_POSITIONS: ${{ env.MAX_POSITIONS }}
          MAX_BUYS_PER_RUN: ${{ env.MAX_BUYS_PER_RUN }}
          SL_PCT: ${{ env.SL_PCT }}
          TRAIL_PCT: ${{ env.TRAIL_PCT }}
          TP1_PCT: ${{ env.TP1_PCT }}
          TP1_SIZE: ${{ env.TP1_SIZE }}
          RESERVE_CASH_PCT: ${{ env.RESERVE_CASH_PCT }}
          DAILY_NOTIONAL_CAP_USD: ${{ env.DAILY_NOTIONAL_CAP_USD }}
          USD_ONLY: ${{ env.USD_ONLY }}
          WHITELIST: ${{ env.WHITELIST }}
          ROTATE_WHEN_CASH_SHORT: ${{ env.ROTATE_WHEN_CASH_SHORT }}
          ROTATE_WHEN_FULL: ${{ env.ROTATE_WHEN_FULL }}
          DUST_MIN_USD: ${{ env.DUST_MIN_USD }}
          BOT_NAME: ${{ env.BOT_NAME }}
          PYTHONUNBUFFERED: ${{ env.PYTHONUNBUFFERED }}
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}
        run: |
          echo "========== RUN CONFIG =========="
          echo "ðŸš§ DRY_RUN=${DRY_RUN} â€” RUN_SWITCH=${RUN_SWITCH}"
          echo "MAX_POSITIONS=${MAX_POSITIONS} â€” MAX_BUYS_PER_RUN=${MAX_BUYS_PER_RUN}"
          echo "SL=${SL_PCT} TRAIL=${TRAIL_PCT} TP1=${TP1_PCT} x ${TP1_SIZE}"
          echo "RESERVE_CASH_PCT=${RESERVE_CASH_PCT} â€” DUST_MIN_USD=${DUST_MIN_USD}"
          echo "WHITELIST=${WHITELIST} â€” USD_ONLY=${USD_ONLY}"
          echo "================================"
          python ./main.py

      - name: Skipped (risk OFF or switch OFF)
        if: ${{ !(env.RUN_SWITCH == 'ON' && steps.risk.outputs.risk == 'ON') }}
        run: |
          echo "Skipped bot run â†’ Reason:"
          echo "  RUN_SWITCH=${RUN_SWITCH}"
          echo "  Risk=${{ steps.risk.outputs.risk || 'UNKNOWN' }}"
          echo "  DRY_RUN=${DRY_RUN}"
          echo "This is expected when Risk=OFF. The moment Risk=ON, this job will execute."
