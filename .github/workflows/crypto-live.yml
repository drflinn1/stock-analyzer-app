name: Crypto Live (Every 15 min — Rotation + Exits)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "Dry run (no real orders)"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]
      TOP_K:
        description: "Hold up to this many symbols"
        required: true
        default: "6"
        type: string
      EDGE_THRESHOLD:
        description: "Min edge (e.g., 0.004 = 0.4%)"
        required: true
        default: "0.004"
        type: string
      RESERVE_CASH_USD:
        description: "Keep at least this much USD"
        required: true
        default: "25"
        type: string
      USD_PER_TRADE:
        description: "USD per buy"
        required: true
        default: "10"
        type: string
      MIN_COST_PER_ORDER:
        description: "USD min notional per order"
        required: true
        default: "5.0"
        type: string
      MAX_SPREAD_BPS:
        description: "Skip markets wider than this (bps)"
        required: true
        default: "75"
        type: string
      ROTATE_WEAKEST_STRICT:
        description: "If weakest cannot be sold, skip rotation"
        required: true
        default: "false"
        type: choice
        options: ["true","false"]
      PARTIAL_ASSIST:
        description: "Sell tiny slice of next-weakest to free cash if needed"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]
      WHY_NOT_LOGS:
        description: "Verbose reasons for rejections"
        required: true
        default: "true"
        type: choice
        options: ["true","false"]

permissions:
  contents: read

jobs:
  run:
    name: Run Crypto Bot
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Set up job
        run: echo "Starting…"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt

      # Fail early if secrets are missing
      - name: Check Kraken secrets
        shell: bash
        run: |
          if [[ -z "${{ secrets.KRAKEN_API_KEY }}" || -z "${{ secrets.KRAKEN_API_SECRET }}" ]]; then
            echo "::error title=Missing Kraken Secrets::KRAKEN_API_KEY and/or KRAKEN_API_SECRET are not available to this workflow run."
            exit 1
          fi
          echo "Kraken secrets detected."

      - name: Echo config (non-secret)
        run: |
          echo "DRY_RUN=${{ inputs.DRY_RUN || 'true' }}"
          echo "TOP_K=${{ inputs.TOP_K || '6' }}"
          echo "EDGE_THRESHOLD=${{ inputs.EDGE_THRESHOLD || '0.004' }}"
          echo "RESERVE_CASH_USD=${{ inputs.RESERVE_CASH_USD || '25' }}"
          echo "USD_PER_TRADE=${{ inputs.USD_PER_TRADE || '10' }}"
          echo "MIN_COST_PER_ORDER=${{ inputs.MIN_COST_PER_ORDER || '5.0' }}"
          echo "MAX_SPREAD_BPS=${{ inputs.MAX_SPREAD_BPS || '75' }}"
          echo "ROTATE_WEAKEST_STRICT=${{ inputs.ROTATE_WEAKEST_STRICT || 'false' }}"
          echo "PARTIAL_ASSIST=${{ inputs.PARTIAL_ASSIST || 'true' }}"
          echo "WHY_NOT_LOGS=${{ inputs.WHY_NOT_LOGS || 'true' }}"

      - name: Run bot
        env:
          # Exchange & secrets
          EXCHANGE: kraken
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

          # Dispatch-controlled knobs (10 inputs max)
          DRY_RUN: ${{ inputs.DRY_RUN || 'true' }}
          TOP_K: ${{ inputs.TOP_K || '6' }}
          EDGE_THRESHOLD: ${{ inputs.EDGE_THRESHOLD || '0.004' }}
          RESERVE_CASH_USD: ${{ inputs.RESERVE_CASH_USD || '25' }}
          USD_PER_TRADE: ${{ inputs.USD_PER_TRADE || '10' }}
          MIN_COST_PER_ORDER: ${{ inputs.MIN_COST_PER_ORDER || '5.0' }}
          MAX_SPREAD_BPS: ${{ inputs.MAX_SPREAD_BPS || '75' }}
          ROTATE_WEAKEST_STRICT: ${{ inputs.ROTATE_WEAKEST_STRICT || 'false' }}
          PARTIAL_ASSIST: ${{ inputs.PARTIAL_ASSIST || 'true' }}
          WHY_NOT_LOGS: ${{ inputs.WHY_NOT_LOGS || 'true' }}

          # Fixed env defaults (edit here if you want)
          COOLDOWN_MINUTES: "10"
          TAKE_PROFIT_PCT: "0.05"
          STOP_LOSS_PCT: "0.03"
          TRAILING_STOP_PCT: "0.02"
          UNIVERSE: ""
          IGNORE_TICKERS: "USDT,USDC,USD,EUR,GBP,XRP"
        run: |
          python main.py
