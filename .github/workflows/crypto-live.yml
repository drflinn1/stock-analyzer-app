name: Crypto Live — Auto-Pick + Guards (every 15m)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      RUN_SWITCH:
        description: "Set to ON to allow live trading (otherwise skip)"
        default: "ON"
      DRY_RUN:
        description: "If ON, simulate orders (no real trades)"
        default: "ON"
      RISK_OVERRIDE:
        description: "Force risk gate: ON or OFF (leave blank to auto-compute)"
        default: ""
      MAX_POSITIONS:
        description: "Max concurrent positions"
        default: "6"
      DUST_MIN_USD:
        description: "Treat balances under this USD as dust"
        default: "2"
      SCREENER_TOP_N:
        description: "How many top-strength coins to show"
        default: "12"
      MIN_QVOL_USD:
        description: "Minimum 24h quote volume (USD) for screener"
        default: "50000"
      SPREAD_MAX_PCT:
        description: "Max allowed spread % for screener"
        default: "0.60"

env:
  RUN_SWITCH: ${{ inputs.RUN_SWITCH || 'ON' }}
  DRY_RUN: ${{ inputs.DRY_RUN || 'ON' }}
  RISK_OVERRIDE: ${{ inputs.RISK_OVERRIDE || '' }}
  MAX_POSITIONS: ${{ inputs.MAX_POSITIONS || '6' }}
  DUST_MIN_USD: ${{ inputs.DUST_MIN_USD || '2' }}
  RESERVE_CASH_USD: "0"
  MAX_BUYS_PER_RUN: "1"
  ROTATE_WHEN_CASH_SHORT: "true"
  SCREENER_TOP_N: ${{ inputs.SCREENER_TOP_N || '12' }}
  MIN_QVOL_USD: ${{ inputs.MIN_QVOL_USD || '50000' }}
  SPREAD_MAX_PCT: ${{ inputs.SPREAD_MAX_PCT || '0.60' }}
  PYTHONUNBUFFERED: "1"

jobs:
  live:
    name: Live Crypto Run
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt numpy pandas
          fi

      # ---- Compute risk signal -----------------------------------------------
      - name: Compute Risk Signal
        id: risk
        env:
          RISK_OVERRIDE: ${{ env.RISK_OVERRIDE }}
        run: |
          python - <<'PY'
          import os, json
          result = {"risk": "OFF", "reason": "default"}
          override = os.getenv("RISK_OVERRIDE","").strip().upper()
          if override in ("ON","OFF"):
              result["risk"] = override
              result["reason"] = "override"
          else:
              try:
                  import ccxt
                  ex = ccxt.kraken()
                  markets = ex.load_markets()
                  candidates = ["BTC/USD","XBT/USD","ETH/USD","SOL/USD","DOGE/USD"]
                  wanted = {"BTC":"", "ETH":"", "SOL":"", "DOGE":""}
                  for s in candidates:
                      base = s.split("/")[0].replace("XBT","BTC")
                      if s in markets and base in wanted and not wanted[base]:
                          wanted[base] = s
                  if not wanted["BTC"]:
                      wanted["BTC"] = "XBT/USD" if "XBT/USD" in markets else "BTC/USD"
                  for k in ("ETH","SOL","DOGE"):
                      if not wanted[k]:
                          wanted[k] = f"{k}/USD"
                  basket = [wanted["BTC"], wanted["ETH"], wanted["SOL"], wanted["DOGE"]]
                  positives, detail = 0, {}
                  for sym in basket:
                      try:
                          t = ex.fetch_ticker(sym)
                          pct = None
                          if isinstance(t.get("percentage"), (int,float)):
                              pct = float(t["percentage"])
                          else:
                              last, open_ = t.get("last"), t.get("open")
                              if isinstance(last,(int,float)) and isinstance(open_,(int,float)) and open_:
                                  pct = (last/open_ - 1.0)*100.0
                          detail[sym] = pct
                          if pct is not None and pct > 0: positives += 1
                      except Exception:
                          detail[sym] = None
                  result["risk"] = "ON" if positives >= 3 else "OFF"
                  result["reason"] = f"{positives}/4 green"
                  result["detail"] = detail
              except Exception as e:
                  result["risk"] = "OFF"
                  result["reason"] = f"error:{type(e).__name__}"
          print("RISK_SIGNAL_COMPUTE =>", json.dumps(result, indent=2))
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"risk={result['risk']}\n")
              fh.write(f"reason={result['reason']}\n")
          os.makedirs(".state", exist_ok=True)
          open(".state/last_risk_signal.txt","w").write(result["risk"])
          open(".state/last_risk_reason.txt","w").write(result["reason"])
          open(".state/last_risk_detail.json","w").write(json.dumps(result, indent=2))
          PY

      - name: Show computed risk
        run: |
          echo "Computed risk: ${{ steps.risk.outputs.risk }} (reason: ${{ steps.risk.outputs.reason }})"
          echo "RUN_SWITCH=${RUN_SWITCH}"

      - name: Add job summary
        run: |
          {
            echo "## Crypto Live — Gate Summary"
            echo "- **RUN_SWITCH**: ${RUN_SWITCH}"
            echo "- **Risk**: ${{ steps.risk.outputs.risk }} (_${{ steps.risk.outputs.reason }}_)"
            echo "- **DRY_RUN**: ${DRY_RUN}"
            echo "- **MAX_POSITIONS**: ${MAX_POSITIONS}"
            echo "- **DUST_MIN_USD**: ${DUST_MIN_USD}"
          } >> "$GITHUB_STEP_SUMMARY"

      # ---- Market Strength Screener (always runs) ----------------------------
      - name: Market Strength Screener (Kraken USD)
        env:
          TOP_N: ${{ env.SCREENER_TOP_N }}
          MIN_QVOL_USD: ${{ env.MIN_QVOL_USD }}
          SPREAD_MAX_PCT: ${{ env.SPREAD_MAX_PCT }}
        run: |
          python - <<'PY'
          import os, json, math
          TOP_N = int(os.getenv("TOP_N","12"))
          MIN_QVOL = float(os.getenv("MIN_QVOL_USD","50000"))
          MAX_SPREAD = float(os.getenv("SPREAD_MAX_PCT","0.60"))
          import ccxt, pathlib
          ex = ccxt.kraken()
          markets = ex.load_markets()
          # USD spot only; skip stables/fiat bases
          skip_bases = {"USDT","USDC","EUR","GBP","USD"}
          symbols = []
          for m in markets.values():
              if not m.get("active", True): 
                  continue
              if m.get("spot") and m.get("quote") == "USD":
                  base = m.get("base","")
                  if base not in skip_bases:
                      symbols.append(m["symbol"])
          rows = []
          for sym in symbols:
              try:
                  t = ex.fetch_ticker(sym)
                  last = t.get("last")
                  open_ = t.get("open")
                  pct = t.get("percentage")
                  if pct is None and isinstance(last,(int,float)) and isinstance(open_,(int,float)) and open_:
                      pct = (last/open_ - 1.0)*100.0
                  bid, ask = t.get("bid"), t.get("ask")
                  spread = None
                  if isinstance(bid,(int,float)) and isinstance(ask,(int,float)) and (bid>0 and ask>0):
                      mid = (bid+ask)/2.0
                      if mid>0:
                          spread = (ask-bid)/mid*100.0
                  qvol = t.get("quoteVolume")
                  if qvol is None:
                      bv = t.get("baseVolume")
                      if isinstance(bv,(int,float)) and isinstance(last,(int,float)):
                          qvol = bv*last
                  if qvol is None:
                      qvol = 0.0
                  # filters
                  if spread is not None and spread > MAX_SPREAD: 
                      continue
                  if qvol < MIN_QVOL: 
                      continue
                  rows.append({
                      "symbol": sym,
                      "pct": pct if pct is not None else -9999,
                      "last": last,
                      "spread": spread,
                      "qvol": qvol
                  })
              except Exception:
                  pass
          rows.sort(key=lambda r: (r["pct"] if r["pct"] is not None else -9999), reverse=True)
          top = rows[:TOP_N]
          pathlib.Path(".state").mkdir(exist_ok=True)
          (pathlib.Path(".state")/"top_candidates.json").write_text(json.dumps(top, indent=2))
          # Write table to job summary
          def fmt(v, nd=2):
              return "-" if v is None or (isinstance(v,float) and math.isnan(v)) else (f"{v:.{nd}f}" if isinstance(v,(int,float)) else str(v))
          lines = ["## Screener — Top Strength (Kraken USD)","",
                   f"Filters: MIN_QVOL_USD≥{MIN_QVOL:.0f}, SPREAD≤{MAX_SPREAD:.2f}%","","| # | Symbol | 24h % | Last | Spread % | 24h $Vol |",
                   "|---:|:------|------:|-----:|--------:|--------:|"]
          for i,r in enumerate(top,1):
              lines.append(f"| {i} | {r['symbol']} | {fmt(r['pct'])} | {fmt(r['last'])} | {fmt(r['spread'])} | {fmt(r['qvol'],0)} |")
          with open(os.environ["GITHUB_STEP_SUMMARY"],"a") as fh:
              fh.write("\n".join(lines)+"\n")
          PY

      # ---- Only run when BOTH gates are ON -----------------------------------
      - name: Sweep Dust (optional)
        if: ${{ env.RUN_SWITCH == 'ON' && steps.risk.outputs.risk == 'ON' }}
        run: |
          echo "Sweeping dust < ${DUST_MIN_USD} USD (if your bot implements it)..."

      - name: Run bot (main.py)
        if: ${{ env.RUN_SWITCH == 'ON' && steps.risk.outputs.risk == 'ON' }}
        env:
          DRY_RUN: ${{ env.DRY_RUN }}
          MAX_POSITIONS: ${{ env.MAX_POSITIONS }}
          DUST_MIN_USD: ${{ env.DUST_MIN_USD }}
        run: |
          echo "🚧 DRY_RUN=${DRY_RUN} — MAX_POSITIONS=${MAX_POSITIONS} — DUST_MIN_USD=${DUST_MIN_USD}"
          if [ -f ./main.py ]; then
            python ./main.py
          elif [ -f trader/main.py ]; then
            python trader/main.py
          else
            echo "::error::Could not find main.py (root or trader/)."
            exit 1
          fi

      # ---- Artifacts (always) -------------------------------------------------
      - name: Upload .state artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: state-${{ github.run_id }}
          path: |
            .state/**
            **/kpi_history.csv
            **/spec_gate_report.txt
          if-no-files-found: ignore
