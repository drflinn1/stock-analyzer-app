name: Crypto Live â€” Kraken (every 15m)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "ON = simulate (no orders), OFF = live"
        type: choice
        options: ["ON", "OFF"]
        default: "OFF"
      RUN_SWITCH:
        description: "Master on/off switch inside the bot"
        type: choice
        options: ["ON", "OFF"]
        default: "ON"
  schedule:
    - cron: "*/15 * * * *"  # every 15 minutes

concurrency:
  group: crypto-live-kraken
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"

  # ===== Conservative defaults for a hands-free week =====
  RESERVE_CASH_PCT: "15"          # percent, not fraction
  USD_PER_TRADE: "20"
  MIN_TRADE_NOTIONAL_USD: "5"
  DUST_MIN_USD: "2"

  MAX_POSITIONS: "6"
  MAX_BUYS_PER_RUN: "1"
  ROTATE_WHEN_FULL: "true"
  ROTATE_WHEN_CASH_SHORT: "true"

  AUTO_UNIVERSE: "true"
  UNIVERSE_MIN_USD_VOL: "300000"
  UNIVERSE_TOP_K: "10"
  UNIVERSE_EXCLUDE: "USDT,USDC,EUR,GBP,USD,SPX,PUMP,BABY"
  QUOTE: "USD"

  TAKE_PROFIT_PCT: "3"
  STOP_LOSS_PCT: "2"
  TRAIL_STOP_PCT: "1"
  EMERGENCY_SL_PCT: "8"
  MAX_DAILY_LOSS_PCT: "5"
  MAX_DAILY_ENTRIES: "4"

  CLEANUP_NON_UNIVERSE: "true"
  NONUNI_SELL_IF_DOWN_PCT: "0"
  NONUNI_KEEP_IF_WINNER_PCT: "6"

  RUN_SWITCH: "ON"

  STATE_DIR: ".state"
  KPI_CSV: ".state/kpi_history.csv"
  KPI_CHART: ".state/kpi_chart.png"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt requests pandas matplotlib
          fi

      - name: Print env banner
        run: |
          echo "================ STANDARD PRESET ================"
          echo "DRY_RUN=${{ inputs.DRY_RUN }}  RUN_SWITCH=${{ inputs.RUN_SWITCH }}"
          echo "RESERVE_CASH_PCT=${{ env.RESERVE_CASH_PCT }}%"
          echo "USD_PER_TRADE=${{ env.USD_PER_TRADE }}  MIN_TRADE_NOTIONAL_USD=${{ env.MIN_TRADE_NOTIONAL_USD }}"
          echo "MAX_POSITIONS=${{ env.MAX_POSITIONS }}  MAX_BUYS_PER_RUN=${{ env.MAX_BUYS_PER_RUN }}"
          echo "AUTO_UNIVERSE=${{ env.AUTO_UNIVERSE }}  TOP_K=${{ env.UNIVERSE_TOP_K }}  MIN_USD_VOL=${{ env.UNIVERSE_MIN_USD_VOL }}"
          echo "================================================="

      - name: Run Bot
        env:
          # runtime toggles
          DRY_RUN: ${{ inputs.DRY_RUN }}
          RUN_SWITCH: ${{ inputs.RUN_SWITCH }}

          # provide both sets (some code reads one or the other)
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          CCXT_API_KEY: ${{ secrets.CCXT_API_KEY }}
          CCXT_API_SECRET: ${{ secrets.CCXT_API_SECRET }}

          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -e
          # If KRAKEN_* missing but CCXT_* exist, copy them over so ccxt gets apiKey/secret
          if [ -z "${KRAKEN_API_KEY}" ] && [ -n "${CCXT_API_KEY}" ]; then
            export KRAKEN_API_KEY="${CCXT_API_KEY}"
            export KRAKEN_API_SECRET="${CCXT_API_SECRET}"
            echo "[env] Fallback: using CCXT_* values for KRAKEN_*"
          fi
          python -u main.py

      - name: Build KPI chart (optional)
        run: |
          if [ -f tools/make_kpi_chart.py ] && [ -f "${{ env.KPI_CSV }}" ]; then
            python tools/make_kpi_chart.py "${{ env.KPI_CSV }}" "${{ env.KPI_CHART }}" || true
          else
            echo "KPI chart script or CSV not found; skipping."
          fi

      - name: Upload .state artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: standard-state-${{ github.run_id }}
          path: |
            .state/**
            !.state/**/*.tmp
          if-no-files-found: warn

      - name: Upload logs (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: standard-logs-${{ github.run_id }}
          path: |
            logs/**
          if-no-files-found: ignore
