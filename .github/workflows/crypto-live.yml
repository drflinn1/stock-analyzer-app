name: Crypto Live (Every 4h â€” Auto-Pick + $100 Reserve)

on:
  schedule:
    - cron: "0 */4 * * *"   # every 4 hours
  workflow_dispatch:

jobs:
  trade:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt ccxt

      # (Optional) show which key names are present (never prints values)
      - name: Sanity check which API env names are present (no values shown)
        env:
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          KRAKEN_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
        run: |
          for v in KRAKEN_API_KEY KRAKEN_API_SECRET KRAKEN_KEY KRAKEN_SECRET API_KEY API_SECRET; do
            if [ -z "${!v}" ]; then echo "$v=EMPTY"; else echo "$v=SET"; fi
          done

      # NEW: compute how many buys to allow while keeping a $100 reserve
      - name: Compute dynamic PICKS to enforce reserve
        env:
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          RESERVE_USD: "100"         # <-- keep this much cash untouched
          PER_TRADE_USD: "25"        # must match the env below
          PICKS_CAP: "3"             # never exceed this many buys per run
        run: |
          python - << 'PY'
          import os, math, ccxt
          key=os.environ['KRAKEN_API_KEY']; sec=os.environ['KRAKEN_API_SECRET']
          ex=ccxt.kraken({'apiKey':key,'secret':sec})
          bal=ex.fetch_balance()
          usd = float(bal['total'].get('USD',0) or 0) + float(bal['total'].get('ZUSD',0) or 0)
          reserve = float(os.environ.get('RESERVE_USD', '100'))
          per = float(os.environ.get('PER_TRADE_USD', '25'))
          cap = int(os.environ.get('PICKS_CAP','3'))
          spendable = max(0.0, usd - reserve)
          buys = int(spendable // per)
          buys = max(0, min(buys, cap))
          print(f"[Reserve] USD={usd:.2f}  reserve={reserve:.2f}  spendable={spendable:.2f}  buys_this_run={buys}")
          with open(os.environ['GITHUB_ENV'],'a') as f:
              f.write(f"PICKS_DYNAMIC={buys}\n")
          PY

      - name: Run Crypto Trader (Auto-Pick)
        env:
          DRY_RUN: "False"
          EXCHANGE: "kraken"
          QUOTE: "USD"
          AUTO_PICK: "True"
          PICKS: "${{ env.PICKS_DYNAMIC }}"   # <-- computed above
          PER_TRADE_USD: "25"
          DAILY_CAP_USD: "1000000"
          MIN_QUOTE_VOL_USD: "2000000"
          MIN_RAISE_USD: "10"
          AVOID_REBUY: "False"
          TP_PCT: "0.035"    # 3.5% take-profit
          SL_PCT: "0.02"     # 2.0% stop-loss
          TREND_FILTER: "True"
          COOL: "60m"
          # key names for the engine
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          KRAKEN_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
        run: |
          echo "PICKS_DYNAMIC resolved to: $PICKS"
          python trader/crypto_engine.py
