name: crypto live

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"   # every 15 min

permissions:
  contents: read

jobs:
  crypto-live:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      # ---- Modes ----
      BOT_MODE: TRADE          # main.py auto-launches trader.crypto_engine
      DRY_RUN: "false"         # LIVE MODE
      RUN_SWITCH: "on"

      # ---- Broker (Kraken) ----
      KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

      # ---- Core exits ----
      TAKE_PROFIT: "3.5"
      STOP_LOSS:  "2.0"
      TRAIL_PCT:  "1.2"

      # ---- Universe / quotes ----
      QUOTE_ALLOW: "USD,USDT"
      CORE_WHITELIST: "BTC/USD,ETH/USD,SOL/USD,DOGE/USD"
      SPEC_SYMBOLS: "SPX/USDT,PENGU/USDT,PUMP/USDT"
      PAIR_BLOCKLIST: ""

      # ---- Sizing / caps ----
      USD_PER_TRADE: "30"      # (2) bump per-trade so Kraken min-cost clears
      MAX_POSITIONS: "6"
      RESERVE_USD: "80"        # (2) keep most of your reserve
      DAILY_MAX_TRADES: "6"

      # ---- Force at least N new buys when funds allow ----
      GUARANTEE_MIN_NEW: "1"   # (1)

      # ---- Engine safety floor for tiny orders ----
      MIN_NOTIONAL_USD: "18"   # (3) internal floor; Kraken still applies its own mins

      # ---- STALE (Aggressive) ----
      STALE_MAX_HOURS: "6"
      STALE_MIN_MOVE_PCT: "0.8"
      STALE_MIN_RANGE_PCT: "3.0"
      STALE_COOLDOWN_HOURS: "6"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt pandas
          fi

      - name: Confirm mode
        run: |
          echo "RUN_SWITCH=${RUN_SWITCH}"
          echo "DRY_RUN=${DRY_RUN}"
          echo "BOT_MODE=${BOT_MODE}"
          echo "QUOTE_ALLOW=${QUOTE_ALLOW}"
          echo "CORE_WHITELIST=${CORE_WHITELIST}"
          echo "SPEC_SYMBOLS=${SPEC_SYMBOLS}"
          echo "USD_PER_TRADE=${USD_PER_TRADE}  RESERVE_USD=${RESERVE_USD}"
          echo "GUARANTEE_MIN_NEW=${GUARANTEE_MIN_NEW}  MIN_NOTIONAL_USD=${MIN_NOTIONAL_USD}"
          echo "STALE_MAX_HOURS=${STALE_MAX_HOURS}  STALE_MIN_MOVE_PCT=${STALE_MIN_MOVE_PCT}  STALE_MIN_RANGE_PCT=${STALE_MIN_RANGE_PCT}"
          if [ "${DRY_RUN}" = "true" ]; then
            echo "üöß DRY RUN ‚Äî NO REAL ORDERS SENT üöß"
          else
            echo "‚ö†Ô∏è LIVE MODE ‚Äî REAL ORDERS ENABLED"
          fi

      - name: Run Crypto Live
        run: |
          python -u main.py

      - name: Stale Sweeper (time stop)
        run: |
          python -u trader/stale_sweeper.py

      - name: Pack .state into zip
        run: |
          mkdir -p .state
          zip -r "state_${GITHUB_RUN_ID}.zip" .state || true

      - name: Upload state artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: state_${{ github.run_id }}
          path: "state_${{ github.run_id }}.zip"
          if-no-files-found: ignore
