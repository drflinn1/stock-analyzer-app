# .github/workflows/crypto-live.yml
name: Crypto Live (Every 15 min â€” Guarded)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch: {}

jobs:
  trade:
    runs-on: ubuntu-latest
    env:
      # --- Core bot env (example â€” keep your real values/whitelist as you have them) ---
      EXCHANGE: kraken
      DRY_RUN: "true"            # <â€” trading bot dry-run (set false when you go live)
      UNIVERSE_MODE: "auto"      # auto-pick top-K
      TOP_K: "4"
      QUOTE_CCY: "USD"
      DAILY_LOSS_CAP_PCT: "3"
      MAX_DAILY_ENTRIES: "3"
      RESERVE_USD: "100"
      # ... your other existing ENV knobs ...

      # --- Dust Sweeper knobs ---
      SWEEP_ENABLE: "true"       # quick on/off for the step
      SWEEP_DRY_RUN: "true"      # <â€” flip to "false" to actually clean dust
      SWEEP_MIN_NOTIONAL_USD: "1.00"  # ignore balances smaller than this
      SWEEP_WHITELIST: "BTC,ETH,SOL,DOGE,USD,USDT,USDC"  # symbols to KEEP (not sold)

      # Keys must already be set in repo/environment secrets
      KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas

      - name: Run Crypto Bot
        run: |
          echo "Starting Crypto Botâ€¦"
          python - <<'PY'
import os, sys, time
print("ðŸš§ DRY RUN â€” NO REAL ORDERS SENT ðŸš§" if os.getenv("DRY_RUN","true").lower()=="true" else "ðŸŸ¢ LIVE TRADING")
# This is a placeholder runner â€” replace with your repo's actual entrypoint, e.g.:
#   python -m trader.main
# Keeping a simple stub so the workflow is copy/paste-safe.
time.sleep(2)
print("KPI: +0.00%  (stub)")
PY

      - name: KPI Artifact (optional)
        run: |
          echo "timestamp,pl_percent" > kpi.csv
          date -u +%FT%TZ | awk '{print $0",0.00"}' >> kpi.csv
        continue-on-error: true

      # ---- DUST SWEEPER (after trading) ----
      - name: Dust Sweeper
        if: env.SWEEP_ENABLE == 'true'
        run: |
          echo "Dust Sweeper (dry-run=${SWEEP_DRY_RUN})"
          python - <<'PY'
import os, math
import ccxt

def as_bool(v, default=False):
    if v is None: return default
    return str(v).strip().lower() in ("1","true","yes","on")

exchange = ccxt.kraken({
    'apiKey': os.getenv('KRAKEN_API_KEY',''),
    'secret': os.getenv('KRAKEN_API_SECRET',''),
})
dry_run = as_bool(os.getenv("SWEEP_DRY_RUN","true"), True)
min_usd = float(os.getenv("SWEEP_MIN_NOTIONAL_USD","1.0"))
keep = set([s.strip().upper() for s in os.getenv("SWEEP_WHITELIST","").split(",") if s.strip()])

print(f"Connecting to Krakenâ€¦ dry_run={dry_run}, min_usd={min_usd}, keep={sorted(keep)}")

# Fetch balances and tickers for valuation
bal = exchange.fetch_balance()
tickers = exchange.load_markets()
prices = {}
for sym, m in tickers.items():
    if m.get("quote") == "USD":
        try:
            prices[m["base"].upper()] = exchange.fetch_ticker(sym)["last"] or 0.0
        except Exception:
            pass

sells = []
for asset, info in bal.get("total", {}).items():
    qty = float(info or 0)
    if qty <= 0: 
        continue
    sym = asset.upper()

    # Always skip whitelisted assets
    if sym in keep:
        continue

    # Value in USD if we can price it
    px = prices.get(sym, 0.0)
    notional = qty * px if px > 0 else 0.0

    # If no USD price known, consider it dust anyway (user will see logs)
    if px == 0.0:
        print(f"[?] No USD price for {sym}; qty={qty}. Treating as potential dust.")

    # Decide if this is dust
    if notional < min_usd:
        # attempt to find a market to sell into USD
        market = f"{sym}/USD" if f"{sym}/USD" in exchange.markets else None
        if not market:
            # try USDT or USDC as fallback if USD not present
            for q in ("USDT","USDC"):
                if f"{sym}/{q}" in exchange.markets:
                    market = f"{sym}/{q}"
                    break
        if market:
            sells.append((sym, qty, market, notional))
        else:
            print(f"[skip] No market to exit {sym} to USD/USDT/USDC; leaving as-is.")

if not sells:
    print("No dust found below threshold.")
else:
    print(f"Found {len(sells)} dust positions:")
    for sym, qty, market, notional in sells:
        print(f" - {sym}: qty={qty:.8f}, notionalâ‰ˆ${notional:.2f}, market={market}")
    if dry_run:
        print("DRY-RUN: No sell orders will be sent.")
    else:
        for sym, qty, market, _ in sells:
            try:
                print(f"Submitting market sell: {market} size={qty}")
                exchange.create_order(market, 'market', 'sell', qty)
            except Exception as e:
                print(f"[error] Sell {market} size={qty}: {e}")
PY

      - name: Done
        run: echo "Run complete."
