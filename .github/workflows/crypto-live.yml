name: Crypto Live — Every 15m (Repo secrets + Preflight + Breadth Brake)

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: read

concurrency:
  group: crypto-live
  cancel-in-progress: true    # auto-cancel older runs when a new one starts

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      # --- Mode ---
      DRY_RUN: "false"
      RUN_SWITCH: "on"

      # --- Exchange & quote ---
      EXCHANGE: "kraken"
      BASE_QUOTE: "USD"

      # --- Positioning / rotation ---
      MAX_POSITIONS: "12"
      MAX_BUYS_PER_RUN: "2"        # more responsive
      ROTATE_WHEN_FULL: "true"
      ROTATE_WHEN_CASH_SHORT: "true"

      # --- Order sizing / dust ---
      MIN_NOTIONAL_USD: "5"
      DUST_MIN_USD: "5"
      RESERVE_CASH_PCT: "5"
      BUY_USD_MIN: "12"            # ensure BTC/ETH orders meet Kraken min cost

      # --- Risk controls ---
      TP_PCT: "2.0"
      SL_PCT: "2.0"                # tighter stop
      TRAIL_PCT: "0.8"             # faster trailing stop
      DAILY_LOSS_CAP: "3"
      AUTO_PAUSE_ON_ERROR: "true"

      # --- Logging / state ---
      LOG_LEVEL: "INFO"
      KPI_CSV_PATH: ".state/kpi_history.csv"
      STATE_DIR: ".state"
      SHOW_BANNER: "true"

      # --- Universe (stick to majors) ---
      UNIVERSE_WHITELIST: "BTC/USD,ETH/USD,SOL/USD,DOGE/USD"
      TOPK: "6"

      # --- Market breadth brake (pause buys when weak; trim weakest) ---
      BREADTH_SYMBOL: "BTC/USD"
      BREADTH_EMA_TIMEFRAME: "1h"
      BREADTH_EMA_LEN: "20"
      BREADTH_PAUSE_BUYS: "true"
      BREADTH_EXIT_WEAKEST: "true"

      # --- Secrets (repo-level) ---
      KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
      KRAKEN_API_OTP: ${{ secrets.KRAKEN_API_OTP }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install ccxt pandas numpy requests python-dateutil
          fi

      - name: Preflight — check secrets present (length only)
        run: |
          [ -z "${KRAKEN_API_KEY}" ] && echo "❌ KRAKEN_API_KEY missing" && exit 1 || echo "KRAKEN_API_KEY len: ${#KRAKEN_API_KEY}"
          [ -z "${KRAKEN_API_SECRET}" ] && echo "❌ KRAKEN_API_SECRET missing" && exit 1 || echo "KRAKEN_API_SECRET len: ${#KRAKEN_API_SECRET}"
          echo "✅ Secrets present"

      - name: Print mode & guards
        run: |
          echo "Mode: DRY_RUN=${DRY_RUN}, RUN_SWITCH=${RUN_SWITCH}"
          echo "Dust threshold: DUST_MIN_USD=${DUST_MIN_USD}"
          echo "Max positions: ${MAX_POSITIONS}, Max buys per run: ${MAX_BUYS_PER_RUN}"
          echo "Rotate when full: ${ROTATE_WHEN_FULL}, Rotate when cash short: ${ROTATE_WHEN_CASH_SHORT}"
          echo "Daily loss cap: ${DAILY_LOSS_CAP}%"
          echo "MinNotional: $${MIN_NOTIONAL_USD}, BuyMin: $${BUY_USD_MIN}"
          echo "Whitelist: ${UNIVERSE_WHITELIST}"
          echo "Breadth: ${BREADTH_SYMBOL} ${BREADTH_EMA_TIMEFRAME} EMA${BREADTH_EMA_LEN} (pause buys=${BREADTH_PAUSE_BUYS}, trim weakest=${BREADTH_EXIT_WEAKEST})"
          echo "State dir: ${STATE_DIR}"

      - name: Run Crypto Live
        run: |
          mkdir -p "${STATE_DIR}"
          python -u main.py

      - name: Summarize run
        if: always()
        run: |
          echo "----- SUMMARY -----"
          if [ -f "${STATE_DIR}/summary.txt" ]; then
            cat "${STATE_DIR}/summary.txt" || true
          else
            echo "No summary.txt found (ok)."
          fi

      - name: Upload state & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crypto-live-state-${{ github.run_id }}
          path: |
            .state/**
            **/run.log
            **/summary.txt
          if-no-files-found: ignore
