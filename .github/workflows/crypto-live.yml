name: Crypto Live â€” Kraken (every 15m)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "ON = simulate (no orders). OFF = live orders."
        type: choice
        required: false
        default: "OFF"
        options: ["ON", "OFF"]
      RUN_SWITCH:
        description: "Master on/off switch for the bot"
        type: choice
        required: false
        default: "ON"
        options: ["ON", "OFF"]
  schedule:
    - cron: "*/15 * * * *"

permissions:
  contents: read

concurrency:
  group: crypto-live-${{ github.ref }}
  cancel-in-progress: true

env:
  # ---- Core toggles ----
  DRY_RUN: ${{ inputs.DRY_RUN || 'OFF' }}
  RUN_SWITCH: ${{ inputs.RUN_SWITCH || 'ON' }}

  # ---- Auto-universe controls ----
  AUTO_UNIVERSE: "true"                     # <â€” turn on automatic universe maintenance
  UNIVERSE_STATIC: "BTC,ETH,SOL,DOGE,ADA,ZEC" # fallback/pinned list when AUTO_UNIVERSE=false
  UNIVERSE_TOP_K: "6"                       # pick top-K by USD volume, after filters
  UNIVERSE_EXCLUDE: "USDT,USDC,EUR,GBP,USD,SPX,PUMP,BABY"  # always exclude these bases
  UNIVERSE_MIN_USD_VOL: "500000"            # min 24h USD volume to be eligible
  MAX_SPREAD_PCT: "0.60"                    # skip pairs with bid/ask spread > this %
  MIN_TRADE_NOTIONAL_USD: "5"               # skip pairs whose price*minQty < this

  # ---- Exchange / quote ----
  EXCHANGE: "kraken"
  QUOTE: "USD"

  # ---- Sizing & positions ----
  MAX_POSITIONS: "6"
  USD_PER_TRADE: "20"
  RESERVE_CASH_PCT: "10"

  # ---- Rotation & dust ----
  ROTATE_WHEN_CASH_SHORT: "true"
  ROTATE_WHEN_FULL: "false"
  DUST_MIN_USD: "2"

  # ---- Guards ----
  TAKE_PROFIT_PCT: "3.0"
  STOP_LOSS_PCT: "2.0"
  TRAIL_STOP_PCT: "1.0"
  MAX_DAILY_LOSS_PCT: "5.0"
  MAX_DAILY_ENTRIES: "6"
  EMERGENCY_SL_PCT: "8.0"

  # ---- Non-universe cleanup ----
  CLEANUP_NON_UNIVERSE: "true"              # sell stray coins the bot doesn't manage
  NONUNI_SELL_IF_DOWN_PCT: "0.0"            # sell non-universe if 24h% < this (0 = any red)
  NONUNI_KEEP_IF_WINNER_PCT: "6.0"          # but keep if 24h% >= this (protect big winners)

  # ---- Files & artifacts ----
  STATE_DIR: ".state"
  POSITIONS_JSON: ".state/positions.json"
  KPI_CSV: ".state/kpi_history.csv"
  SPEC_GATE_REPORT: ".state/spec_gate_report.txt"

  # ---- Slack webhook secret ----
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  live:
    name: Run bot
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}-${{ env.DRY_RUN }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install minimal deps (fast)
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir ccxt pandas numpy requests

      # ---------- Heartbeat ----------
      - name: Heartbeat â€” Slack "bot starting"
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        run: |
          RUN_MODE="${{ env.DRY_RUN }}"
          NOW="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          MSG="ðŸ«€ *Crypto Live Heartbeat* â€” ${NOW}\nRepo: ${{ github.repository }}\nRef: ${{ github.ref_name }}\nRun: ${{ github.run_id }}\nMode: *${RUN_MODE}*\nSwitch: ${{ env.RUN_SWITCH }}"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -sS -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      - name: Heartbeat â€” echo fallback
        if: ${{ env.SLACK_WEBHOOK_URL == '' }}
        run: echo "Heartbeat OK â€” $(date -u) â€” DRY_RUN=${{ env.DRY_RUN }} RUN_SWITCH=${{ env.RUN_SWITCH }}"

      # ---------- Run bot ----------
      - name: Prepare state dir
        run: |
          mkdir -p "${STATE_DIR}"
          : > "${SPEC_GATE_REPORT}" || true

      - name: Print mode banner
        run: |
          if [ "${DRY_RUN}" = "ON" ]; then
            echo "ðŸš§ DRY RUN â€” NO REAL ORDERS SENT ðŸš§"
          else
            echo "âœ… LIVE MODE â€” REAL ORDERS ENABLED"
          fi

      - name: Run main.py
        env:
          EXCHANGE: ${{ env.EXCHANGE }}
          QUOTE: ${{ env.QUOTE }}

          AUTO_UNIVERSE: ${{ env.AUTO_UNIVERSE }}
          UNIVERSE_STATIC: ${{ env.UNIVERSE_STATIC }}
          UNIVERSE_TOP_K: ${{ env.UNIVERSE_TOP_K }}
          UNIVERSE_EXCLUDE: ${{ env.UNIVERSE_EXCLUDE }}
          UNIVERSE_MIN_USD_VOL: ${{ env.UNIVERSE_MIN_USD_VOL }}
          MAX_SPREAD_PCT: ${{ env.MAX_SPREAD_PCT }}
          MIN_TRADE_NOTIONAL_USD: ${{ env.MIN_TRADE_NOTIONAL_USD }}

          MAX_POSITIONS: ${{ env.MAX_POSITIONS }}
          USD_PER_TRADE: ${{ env.USD_PER_TRADE }}
          RESERVE_CASH_PCT: ${{ env.RESERVE_CASH_PCT }}
          ROTATE_WHEN_CASH_SHORT: ${{ env.ROTATE_WHEN_CASH_SHORT }}
          ROTATE_WHEN_FULL: ${{ env.ROTATE_WHEN_FULL }}
          DUST_MIN_USD: ${{ env.DUST_MIN_USD }}
          TAKE_PROFIT_PCT: ${{ env.TAKE_PROFIT_PCT }}
          STOP_LOSS_PCT: ${{ env.STOP_LOSS_PCT }}
          TRAIL_STOP_PCT: ${{ env.TRAIL_STOP_PCT }}
          MAX_DAILY_LOSS_PCT: ${{ env.MAX_DAILY_LOSS_PCT }}
          MAX_DAILY_ENTRIES: ${{ env.MAX_DAILY_ENTRIES }}
          EMERGENCY_SL_PCT: ${{ env.EMERGENCY_SL_PCT }}

          CLEANUP_NON_UNIVERSE: ${{ env.CLEANUP_NON_UNIVERSE }}
          NONUNI_SELL_IF_DOWN_PCT: ${{ env.NONUNI_SELL_IF_DOWN_PCT }}
          NONUNI_KEEP_IF_WINNER_PCT: ${{ env.NONUNI_KEEP_IF_WINNER_PCT }}

          RUN_SWITCH: ${{ env.RUN_SWITCH }}
          DRY_RUN: ${{ env.DRY_RUN }}
          STATE_DIR: ${{ env.STATE_DIR }}
          POSITIONS_JSON: ${{ env.POSITIONS_JSON }}
          KPI_CSV: ${{ env.KPI_CSV }}
          SPEC_GATE_REPORT: ${{ env.SPEC_GATE_REPORT }}

          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
        run: python -u main.py

      # ---------- KPI chart ----------
      - name: KPI chart â€” build PNG
        if: always()
        run: |
          python -m pip install --no-cache-dir matplotlib
          python tools/make_kpi_chart.py
        env:
          STATE_DIR: ${{ env.STATE_DIR }}
          KPI_CSV: ${{ env.KPI_CSV }}

      # ---------- Slack completion ----------
      - name: Slack â€” run completed
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        run: |
          STATUS="${{ job.status }}"
          NOW="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          MSG="âœ… *Crypto Live completed* â€” ${NOW}\nStatus: *${STATUS}*\nMode: *${{ env.DRY_RUN }}*\nArtifacts: positions.json / kpi_history.csv / spec_gate_report.txt / kpi_chart.png"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -sS -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" >/dev/null
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK_URL }}

      # ---------- Artifacts ----------
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crypto-live-state-${{ github.run_id }}
          path: |
            .state/positions.json
            .state/kpi_history.csv
            .state/spec_gate_report.txt
            .state/kpi_chart.png
          if-no-files-found: warn
