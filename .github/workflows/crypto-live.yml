name: "Crypto Live (Every 15 min) - LIVE"

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

jobs:
  trade:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    env:
      # SAFETY / MODE
      DRY_RUN: "false"              # set "true" to simulate only
      EXCHANGE: "kraken"

      # RISK KNOBS
      PER_TRADE_USD: "15"
      DAILY_CAP_USD: "30"
      MAX_OPEN_POSITIONS: "6"

      # SIGNAL / SELL KNOBS
      AUTO_UNIVERSE: "true"
      UNIVERSE_SIZE: "500"
      DROP_PCT: "0.8"
      TAKE_PROFIT_PCT: "1.2"        # +1.2% take-profit
      TRAIL_PROFIT_PCT: "0.6"       # 0.6% trailing from peak
      STOP_LOSS_PCT: "0.0"          # 0=off; e.g., "3.0" for -3% hard stop
      SELL_FRACTION: "1.0"          # 1.0=sell all on a hit

      # ONE-TIME FORCE SELL (this run only; then it won't repeat)
      FORCE_SELL_ONCE: "ALL"        # "ALL" to liquidate all non-USD coins once; or "DOGE,XRP"
      FORCE_TOKEN: "cleanup-2025-09-15-01"  # change string to run another one-time sell in the future

      MANUAL_SYMBOLS: ""            # e.g. "BTC/USD,ETH/USD"
      VERBOSE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas numpy

      - name: Sanity - Keys present if live
        if: env.DRY_RUN == 'false'
        run: |
          test -n "${{ secrets.KRAKEN_API_KEY }}" || (echo "Missing KRAKEN_API_KEY" && exit 1)
          test -n "${{ secrets.KRAKEN_API_SECRET }}" || (echo "Missing KRAKEN_API_SECRET" && exit 1)

      # Restore state (entries/peaks + force-sell history)
      - name: Restore .state cache
        uses: actions/cache/restore@v4
        with:
          path: .state/state.json
          key: state-${{ runner.os }}-${{ github.ref_name }}-latest
          restore-keys: |
            state-${{ runner.os }}-${{ github.ref_name }}-
            state-

      - name: Ensure state folder exists
        run: |
          mkdir -p .state
          [ -f .state/state.json ] || echo "{}" > .state/state.json

      - name: Run trader
        env:
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
        run: |
          echo "=== START TRADING OUTPUT ==="
          python main.py
          echo "=== END TRADING OUTPUT ==="

      - name: Save .state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state/state.json
          key: state-${{ runner.os }}-${{ github.ref_name }}-${{ github.run_id }}
