name: Crypto Live (Every 15 min) — LIVE

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:

jobs:
  trade:
    runs-on: ubuntu-latest
    timeout-minutes: 12

    env:
      # Exchange
      EXCHANGE: "kraken"

      # Live vs paper — set "false" to place real orders
      DRY_RUN: "true"

      # Use your USD balance (not USDT)
      SYMBOLS: "BTC/USD,ETH/USD,DOGE/USD,ADA/USD,XRP/USD"

      # Option A — throttle opened up
      PER_TRADE_USD: "20"      # each new buy ≈ $20
      DAILY_CAP_USD: "100"     # up to ~$100 of new buys per day
      MIN_NOTIONAL_USD: "5"

      # Simple buy gate (0 = always allowed by this minimal logic)
      BUY_GATE_PCT: "0.0"

      # Trailing profit engine
      TRAIL_ACTIVATE_PCT: "3.0"   # begin trailing after +3% unrealized P&L
      TRAIL_OFFSET_PCT: "1.0"     # sell if price falls 1% from anchor

      # Kraken API secrets (must be set in repo → Settings → Secrets and variables → Actions)
      KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Restore last run's local state (positions, trails, daily spend)
      - name: Restore .state cache
        uses: actions/cache/restore@v4
        with:
          path: .state
          key: state-${{ github.run_id }}
          restore-keys: |
            state-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt

      # If running live, verify secrets exist
      - name: Sanity — Keys present if live
        if: env.DRY_RUN == 'false'
        run: |
          test -n "${KRAKEN_API_KEY}" || (echo "Missing KRAKEN_API_KEY" && exit 1)
          test -n "${KRAKEN_API_SECRET}" || (echo "Missing KRAKEN_API_SECRET" && exit 1)
          echo "Secrets look present."

      - name: Run trader
        run: |
          echo "=== START TRADING OUTPUT ==="
          python main.py
          echo "=== END TRADING OUTPUT ==="

      # Save updated state so the next run remembers everything
      - name: Save .state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .state
          key: state-${{ github.run_id }}
