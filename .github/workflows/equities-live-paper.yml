name: Equities Live — PAPER (every 15m, multi-buy)

on:
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes UTC
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pyyaml matplotlib pytz

      - name: Create .env (runtime config)
        run: |
          echo "ASSET_CLASS=equities" >> .env
          echo "BROKER=${{ vars.BROKER || 'alpaca' }}" >> .env
          echo "PAPER_TRADING=true" >> .env
          echo "RUN_SWITCH=${{ vars.RUN_SWITCH || 'ON' }}" >> .env
          # --- Force PAPER buys ON locally (isolate from repo-level freeze) ---
          echo "MIN_BUY_USD=10" >> .env
          echo "MAX_POSITIONS=${{ vars.MAX_POSITIONS || '6' }}" >> .env
          echo "MAX_BUYS_PER_RUN=1" >> .env
          echo "RESERVE_CASH_PCT=${{ vars.RESERVE_CASH_PCT || '60' }}" >> .env
          echo "UNIVERSE_TICKERS=${{ vars.UNIVERSE_TICKERS || 'SPY,QQQ,IWM,SMH,AAPL,MSFT,NVDA,AMD,META,GOOGL,TSLA' }}" >> .env
          echo "BAR_TIMEFRAME=${{ vars.BAR_TIMEFRAME || '15m' }}" >> .env
          echo "MARKET_OPEN_ET=${{ vars.MARKET_OPEN_ET || '09:32' }}" >> .env
          echo "MARKET_CLOSE_ET=${{ vars.MARKET_CLOSE_ET || '15:58' }}" >> .env

      - name: Pre-check market hours (ET)
        id: hours
        run: |
          echo "import os, datetime, pytz" > check_market.py
          echo "et = pytz.timezone('America/New_York')" >> check_market.py
          echo "now_et = datetime.datetime.now(et)" >> check_market.py
          echo "open_t = datetime.datetime.strptime(os.getenv('MARKET_OPEN_ET','09:32'), '%H:%M').time()" >> check_market.py
          echo "close_t = datetime.datetime.strptime(os.getenv('MARKET_CLOSE_ET','15:58'), '%H:%M').time()" >> check_market.py
          echo "is_open = (now_et.weekday() < 5) and (open_t <= now_et.time() <= close_t)" >> check_market.py
          echo "print(f'now_et={now_et}, is_open={is_open}')" >> check_market.py
          echo "with open('market_open.flag','w') as f: f.write('1' if is_open else '0')" >> check_market.py
          python check_market.py

      - name: Abort if market closed
        run: |
          if [ "$(cat market_open.flag)" = "1" ]; then
            echo "Market open — continuing"
          else
            echo "Market closed — exiting gracefully"
            exit 0
          fi

      - name: Run Equities PAPER engine
        env:
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        run: |
          echo "Starting equities paper run... (paper buys enabled)"
          python main.py --mode equities || python main.py || true

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: equities-paper-output
          path: |
            .state/**
            kpi_history.csv
            sell_guard_summary.json
            positions.json
          if-no-files-found: ignore
