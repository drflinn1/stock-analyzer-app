name: Crypto Force Sell (One-Time)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'ON = simulate, OFF = send real sell orders'
        type: choice
        options: ['ON','OFF']
        default: 'OFF'
      EXCLUDE:
        description: 'Comma symbols to keep (e.g. BTC,ETH)'
        required: false
        default: ''
      QUOTE:
        description: 'Quote currency'
        required: false
        default: 'USD'
      MIN_USD:
        description: 'Skip tiny lots below this USD value'
        required: false
        default: '1.00'

jobs:
  sell_all:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install ccxt
        run: |
          python -m pip install --upgrade pip
          pip install ccxt

      - name: Force sell
        env:
          DRY_RUN: ${{ inputs.DRY_RUN }}
          QUOTE: ${{ inputs.QUOTE }}
          EXCLUDE: ${{ inputs.EXCLUDE }}
          MIN_USD: ${{ inputs.MIN_USD }}

          # Support both naming schemes
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY || secrets.CCXT_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET || secrets.CCXT_API_SECRET }}
        run: |
          python - <<'PY'
          import os, sys, ccxt
          DRY = os.getenv("DRY_RUN","ON").upper()=="ON"
          quote = os.getenv("QUOTE","USD").upper()
          exclude = {s.strip().upper() for s in os.getenv("EXCLUDE","").split(",") if s.strip()}
          min_usd = float(os.getenv("MIN_USD","1.0"))

          apiKey = os.getenv("KRAKEN_API_KEY")
          secret = os.getenv("KRAKEN_API_SECRET")
          if not apiKey or not secret:
              print("[FATAL] Missing Kraken keys. Add KRAKEN_API_KEY/SECRET or CCXT_*.")
              sys.exit(1)

          ex = ccxt.kraken({"apiKey": apiKey, "secret": secret, "enableRateLimit": True})
          ex.load_markets()

          bal = ex.fetch_balance()
          totals = (bal or {}).get("total", {}) or {}
          sells = []
          for base, amt in totals.items():
              if not amt or amt <= 0: continue
              b = base.upper()
              if b in ("USD","USDT","USDC",quote): continue
              if b in exclude: continue
              sym = f"{b}/{quote}"
              try:
                  t = ex.fetch_ticker(sym)
                  px = t.get("last") or t.get("bid") or t.get("ask") or 0.0
              except Exception:
                  px = 0.0
              usd = float(amt) * float(px or 0.0)
              if usd < min_usd:
                  print(f"[SKIP] {sym}: value ${usd:.2f} < ${min_usd:.2f}")
                  continue
              sells.append((sym, float(amt)))

          if not sells:
              print("[INFO] Nothing to sell.")
              sys.exit(0)

          for sym, amt in sells:
              if DRY:
                  print(f"[DRY] SELL {sym} amt={amt}")
              else:
                  try:
                      o = ex.create_order(sym, "market", "sell", amt)
                      print(f"[LIVE] SELL {sym} id={o.get('id')} amt={amt}")
                  except Exception as e:
                      print(f"[ERROR] SELL {sym} failed: {e}")

          print("[DONE] Force sell sweep complete.")
          PY
