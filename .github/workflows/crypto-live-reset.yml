name: Crypto Live â€” RESET (Full Restore)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'Use OFF for real trades; ON for simulation only'
        required: false
        default: 'ON'
      RESET_MODE:
        description: 'Choose: FORCE_LIQUIDATE or CLEAN_REINIT'
        required: false
        default: 'FORCE_LIQUIDATE'

env:
  RUN_NAME: "CryptoBot RESET"
  RUN_SWITCH: "ON"
  DRY_RUN: ${{ inputs.DRY_RUN || 'ON' }}
  RESET_MODE: ${{ inputs.RESET_MODE || 'FORCE_LIQUIDATE' }}

  MIN_SELL_USD: 10
  DUST_MIN_USD: 2
  DUST_SKIP_STABLES: true

  UNIVERSE_TOP_K: 25
  MAX_POSITIONS: 3
  MAX_BUYS_PER_RUN: 0
  ROTATE_WHEN_FULL: false
  ROTATE_WHEN_CASH_SHORT: false
  RESERVE_CASH_PCT: 5

  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
  KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

jobs:
  reset:
    name: Reset Crypto Portfolio
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Reset or Liquidate
        run: |
          echo "=== Starting CryptoBot RESET ==="
          echo "Mode: $RESET_MODE"
          echo "Dry run: $DRY_RUN"
          mkdir -p .state
          if [ "$RESET_MODE" = "FORCE_LIQUIDATE" ]; then
            echo "Forcing liquidation of all positions..."
            python trader/broker_crypto_ccxt.py --force-liquidate --dry-run=$DRY_RUN
          else
            echo "Clean reinit: clearing local state and sweeping dust..."
            rm -rf .state/positions.json .state/kpi_history.csv
            python tools/dust_sweeper.py --min-usd=$DUST_MIN_USD --skip-stables=$DUST_SKIP_STABLES --dry-run=$DRY_RUN
          fi
          echo "Reset step completed."

      - name: Write baseline guard-pack
        shell: python
        run: |
          import json, os, pathlib, datetime
          p = pathlib.Path(".state"); p.mkdir(parents=True, exist_ok=True)
          guards = {
            "UNIVERSE_TOP_K": int(os.getenv("UNIVERSE_TOP_K","25")),
            "MAX_POSITIONS": int(os.getenv("MAX_POSITIONS","3")),
            "MAX_BUYS_PER_RUN": int(os.getenv("MAX_BUYS_PER_RUN","0")),
            "ROTATE_WHEN_FULL": os.getenv("ROTATE_WHEN_FULL","false") in ("true","1","on"),
            "ROTATE_WHEN_CASH_SHORT": os.getenv("ROTATE_WHEN_CASH_SHORT","false") in ("true","1","on"),
            "RESERVE_CASH_PCT": float(os.getenv("RESERVE_CASH_PCT","5")),
            "MIN_SELL_USD": float(os.getenv("MIN_SELL_USD","10")),
            "DUST_MIN_USD": float(os.getenv("DUST_MIN_USD","2")),
            "DUST_SKIP_STABLES": os.getenv("DUST_SKIP_STABLES","true") in ("true","1","on"),
          }
          data = {
            "created_at": datetime.datetime.utcnow().isoformat()+"Z",
            "label": "September Good Baseline",
            "guards": guards,
            "notes": [
              "Auto-written by crypto-live-reset.yml after reset.",
              "Use DRY_RUN=ON to simulate safely."
            ]
          }
          with open(".state/baseline_config.json","w",encoding="utf-8") as f:
            json.dump(data, f, indent=2)
          print("Wrote .state/baseline_config.json")
          print(json.dumps(data, indent=2))

      - name: Verify baseline file exists
        run: |
          test -f .state/baseline_config.json && echo "Baseline present." || (echo "Missing baseline_config.json"; exit 1)
          ls -al .state || true

      - name: Upload state artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: crypto-reset-state
          path: .state/
          if-no-files-found: warn

      - name: Slack Notify (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          msg="*${RUN_NAME}* finished. Mode: ${RESET_MODE} | DryRun: ${DRY_RUN}"
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$msg\"}" $SLACK_WEBHOOK_URL

      - name: Done
        run: echo "CryptoBot RESET completed successfully."
