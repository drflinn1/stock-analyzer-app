name: Crypto Live — RESET (Clean Restore & Guard Reload)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "DRY_RUN switch for this run only (ON/OFF)"
        required: false
        default: "ON"
      CLEAN_STATE:
        description: "Force wipe and recreate .state/ (true/false)"
        required: false
        default: "true"

permissions:
  contents: read
  actions: read
  id-token: write

concurrency:
  group: crypto-live
  cancel-in-progress: false

env:
  # ---- Safety-first defaults (can be overridden by repo Variables) ----
  RUN_SWITCH: "ON"
  DRY_RUN_DEFAULT: "ON"           # the baseline; workflow_dispatch DRY_RUN overrides per-run
  #
  # Guard rails & sizing caps (safe September-style baseline)
  MIN_BUY_USD: "10"
  MIN_SELL_USD: "10"
  DUST_MIN_USD: "2"
  DUST_SKIP_STABLES: "true"
  RESERVE_CASH_PCT: "5"
  MAX_POSITIONS: "3"
  MAX_BUYS_PER_RUN: "2"
  UNIVERSE_TOP_K: "25"
  ROTATE_WHEN_FULL: "true"
  ROTATE_WHEN_CASH_SHORT: "true"
  #
  # Files/paths
  STATE_DIR: ".state"
  KPI_CSV: ".state/kpi_history.csv"
  POSITIONS_JSON: ".state/positions.json"
  GUARD_FILE: ".state/reset_guard.yaml"
  RESET_FLAG: ".state/RESET_OK"

jobs:
  reset:
    name: Clean Restore & Guard Reload
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decide DRY_RUN for this job
        id: dry
        shell: bash
        run: |
          # Per-run dispatch value takes priority; otherwise use repo Variable DRY_RUN else default.
          DR_INPUT="${{ inputs.DRY_RUN }}"
          DR_VAR="${{ vars.DRY_RUN }}"
          DR_DEF="${DRY_RUN_DEFAULT}"
          if [[ -n "$DR_INPUT" ]]; then DR="$DR_INPUT";
          elif [[ -n "$DR_VAR" ]]; then DR="$DR_VAR";
          else DR="$DR_DEF"; fi
          DR=$(echo "$DR" | tr '[:lower:]' '[:upper:]')
          if [[ "$DR" != "ON" && "$DR" != "OFF" ]]; then DR="ON"; fi
          echo "DRY_RUN=$DR" >> "$GITHUB_OUTPUT"
          echo "Resolved DRY_RUN=$DR"

      - name: Compute effective guard values (repo Variables override env defaults)
        id: guards
        shell: bash
        run: |
          getv() { local key="$1"; local def="$2"; local val="${!key}"; local rvar="${{ toJson(vars) }}"; 
            # prefer GitHub Variables if set, else current env default
            if echo "$rvar" | grep -q "\"$key\":"; then
              # pull from vars map with jq-like primitive using grep/sed
              val=$(echo "$rvar" | tr ',' '\n' | grep "\"$key\"" | head -n1 | sed 's/.*: "\(.*\)".*/\1/')
            fi
            echo "${val:-$def}"
          }

          MIN_BUY_USD=$(getv MIN_BUY_USD "${MIN_BUY_USD}")
          MIN_SELL_USD=$(getv MIN_SELL_USD "${MIN_SELL_USD}")
          DUST_MIN_USD=$(getv DUST_MIN_USD "${DUST_MIN_USD}")
          DUST_SKIP_STABLES=$(getv DUST_SKIP_STABLES "${DUST_SKIP_STABLES}")
          RESERVE_CASH_PCT=$(getv RESERVE_CASH_PCT "${RESERVE_CASH_PCT}")
          MAX_POSITIONS=$(getv MAX_POSITIONS "${MAX_POSITIONS}")
          MAX_BUYS_PER_RUN=$(getv MAX_BUYS_PER_RUN "${MAX_BUYS_PER_RUN}")
          UNIVERSE_TOP_K=$(getv UNIVERSE_TOP_K "${UNIVERSE_TOP_K}")
          ROTATE_WHEN_FULL=$(getv ROTATE_WHEN_FULL "${ROTATE_WHEN_FULL}")
          ROTATE_WHEN_CASH_SHORT=$(getv ROTATE_WHEN_CASH_SHORT "${ROTATE_WHEN_CASH_SHORT}")
          RUN_SWITCH=$(getv RUN_SWITCH "${RUN_SWITCH}")

          {
            echo "MIN_BUY_USD=$MIN_BUY_USD"
            echo "MIN_SELL_USD=$MIN_SELL_USD"
            echo "DUST_MIN_USD=$DUST_MIN_USD"
            echo "DUST_SKIP_STABLES=$DUST_SKIP_STABLES"
            echo "RESERVE_CASH_PCT=$RESERVE_CASH_PCT"
            echo "MAX_POSITIONS=$MAX_POSITIONS"
            echo "MAX_BUYS_PER_RUN=$MAX_BUYS_PER_RUN"
            echo "UNIVERSE_TOP_K=$UNIVERSE_TOP_K"
            echo "ROTATE_WHEN_FULL=$ROTATE_WHEN_FULL"
            echo "ROTATE_WHEN_CASH_SHORT=$ROTATE_WHEN_CASH_SHORT"
            echo "RUN_SWITCH=$RUN_SWITCH"
          } >> "$GITHUB_OUTPUT"

      - name: Clean & recreate .state
        if: ${{ inputs.CLEAN_STATE == 'true' }}
        shell: bash
        run: |
          rm -rf "${STATE_DIR}"
          mkdir -p "${STATE_DIR}"

      - name: Ensure baseline files exist
        shell: bash
        run: |
          mkdir -p "${STATE_DIR}"
          # positions.json baseline
          if [[ ! -f "${POSITIONS_JSON}" ]]; then
            echo "{}" > "${POSITIONS_JSON}"
          fi
          # kpi_history.csv baseline
          if [[ ! -f "${KPI_CSV}" ]]; then
            echo "timestamp,base,bal_usd,pnl_day_usd,buys,sells,open_positions" > "${KPI_CSV}"
          fi

      - name: Write safe guard preset (reset_guard.yaml)
        shell: bash
        run: |
          cat > "${GUARD_FILE}" << 'YAML'
          # Auto-generated by crypto-live-reset.yml
          # Conservative, September-style baseline guards and caps
          run_switch: "${{ steps.guards.outputs.RUN_SWITCH }}"
          dry_run: "${{ steps.dry.outputs.DRY_RUN }}"
          sizing:
            min_buy_usd: ${{ steps.guards.outputs.MIN_BUY_USD }}
            min_sell_usd: ${{ steps.guards.outputs.MIN_SELL_USD }}
            reserve_cash_pct: ${{ steps.guards.outputs.RESERVE_CASH_PCT }}
            max_positions: ${{ steps.guards.outputs.MAX_POSITIONS }}
            max_buys_per_run: ${{ steps.guards.outputs.MAX_BUYS_PER_RUN }}
          universe:
            top_k: ${{ steps.guards.outputs.UNIVERSE_TOP_K }}
          rotation:
            when_full: ${{ steps.guards.outputs.ROTATE_WHEN_FULL }}
            when_cash_short: ${{ steps.guards.outputs.ROTATE_WHEN_CASH_SHORT }}
          dust:
            min_usd: ${{ steps.guards.outputs.DUST_MIN_USD }}
            skip_stables: ${{ steps.guards.outputs.DUST_SKIP_STABLES }}
          YAML
          echo "Wrote ${GUARD_FILE}"

      - name: Mark reset flag
        shell: bash
        run: |
          date -u +"%Y-%m-%dT%H:%M:%SZ RESET_OK (DRY_RUN=${{ steps.dry.outputs.DRY_RUN }})" > "${RESET_FLAG}"
          echo "Reset flag written."

      - name: Upload .state artifact (for visual confirm)
        uses: actions/upload-artifact@v4
        with:
          name: state-after-reset
          path: |
            .state/**
          if-no-files-found: warn
          retention-days: 7

      - name: Job summary
        shell: bash
        run: |
          echo "### ✅ Reset complete" >> $GITHUB_STEP_SUMMARY
          echo "- DRY_RUN: **${{ steps.dry.outputs.DRY_RUN }}**" >> $GITHUB_STEP_SUMMARY
          echo "- Wrote guards to \`${{ env.GUARD_FILE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Cleaned & prepared \`${{ env.STATE_DIR }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Uploaded **state-after-reset** artifact (download to verify)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> Next: run your normal workflow in DRY_RUN=ON to sanity-check buys/sells without touching funds." >> $GITHUB_STEP_SUMMARY
