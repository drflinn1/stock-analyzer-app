name: Crypto Live — Risk-On (every 5m)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "ON = paper, OFF = live"
        type: choice
        options: ["ON", "OFF"]
        default: "OFF"
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes

# Keep Risk-On isolated so it won't cancel other jobs
concurrency:
  group: crypto-live-riskon
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"

  # ===== Risk-On Overrides (main event) =====
  # Deploy more capital, demand decent liquidity, scan a wider top list.
  RESERVE_CASH_PCT: "0.05"         # Risk-On: keep only 5% in cash
  UNIVERSE_MIN_USD_VOL: "500000"   # Require ≥ $500k 24h USD volume
  UNIVERSE_TOP_K: "12"             # Consider up to top 12 symbols

  # ===== House Knobs (kept same as your live file unless you say otherwise) =====
  EXCHANGE: "kraken"
  MAX_POSITIONS: "8"               # allow a bit more breadth in Risk-On
  MAX_BUYS_PER_RUN: "2"            # Risk-On: can scale in faster
  ROTATE_WHEN_FULL: "true"
  ROTATE_WHEN_CASH_SHORT: "true"
  DUST_MIN_USD: "2"
  LOG_COLOR: "true"

  # Outputs / artifacts
  STATE_DIR: ".state"
  KPI_CSV: ".state/kpi_history.csv"
  KPI_CHART: ".state/kpi_chart.png"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Print preset banner
        run: |
          echo "================ RISK-ON PRESET ================"
          echo "DRY_RUN=${{ inputs.DRY_RUN }}"
          echo "RESERVE_CASH_PCT=${{ env.RESERVE_CASH_PCT }}"
          echo "UNIVERSE_MIN_USD_VOL=${{ env.UNIVERSE_MIN_USD_VOL }}"
          echo "UNIVERSE_TOP_K=${{ env.UNIVERSE_TOP_K }}"
          echo "MAX_POSITIONS=${{ env.MAX_POSITIONS }}"
          echo "MAX_BUYS_PER_RUN=${{ env.MAX_BUYS_PER_RUN }}"
          echo "================================================"

      - name: Run Bot
        env:
          # Mode toggle for paper vs live
          DRY_RUN: ${{ inputs.DRY_RUN }}

          # Exchange secrets
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

          # (Optional) Slack webhook if you wired trade/risk alerts
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python -u main.py

      # Optional KPI chart (safe if file isn’t present)
      - name: Build KPI chart (if tools/make_kpi_chart.py exists)
        run: |
          if [ -f tools/make_kpi_chart.py ] && [ -f "${{ env.KPI_CSV }}" ]; then
            python tools/make_kpi_chart.py "${{ env.KPI_CSV }}" "${{ env.KPI_CHART }}" || true
          else
            echo "KPI chart script or CSV not found; skipping."
          fi

      - name: Upload .state artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: riskon-state-${{ github.run_id }}
          path: |
            .state/**
            !.state/**/*.tmp
          if-no-files-found: warn

      - name: Upload logs (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: riskon-logs-${{ github.run_id }}
          path: |
            logs/**
          if-no-files-found: ignore
