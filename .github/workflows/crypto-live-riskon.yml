name: Crypto Live â€” Risk-On (every 5m)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "ON = paper, OFF = live"
        type: choice
        options: ["ON", "OFF"]
        default: "OFF"
  schedule:
    - cron: "*/5 * * * *"

concurrency:
  group: crypto-live-riskon
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"

  # Risk-On emphasis
  RESERVE_CASH_PCT: "5.0"
  UNIVERSE_MIN_USD_VOL: "500000"
  UNIVERSE_TOP_K: "12"

  EXCHANGE: "kraken"
  QUOTE: "USD"
  AUTO_UNIVERSE: "true"
  UNIVERSE_EXCLUDE: "USDT,USDC,EUR,GBP,USD,SPX,PUMP,BABY"
  MAX_SPREAD_PCT: "0.60"
  MIN_TRADE_NOTIONAL_USD: "5"

  MAX_POSITIONS: "8"
  USD_PER_TRADE: "20"
  MAX_BUYS_PER_RUN: "2"
  ROTATE_WHEN_FULL: "true"
  ROTATE_WHEN_CASH_SHORT: "true"
  DUST_MIN_USD: "2"

  TAKE_PROFIT_PCT: "3"
  STOP_LOSS_PCT: "2"
  TRAIL_STOP_PCT: "1"
  EMERGENCY_SL_PCT: "8"
  MAX_DAILY_LOSS_PCT: "5"
  MAX_DAILY_ENTRIES: "6"

  CLEANUP_NON_UNIVERSE: "true"
  NONUNI_SELL_IF_DOWN_PCT: "0"
  NONUNI_KEEP_IF_WINNER_PCT: "6"

  RUN_SWITCH: "ON"

  STATE_DIR: ".state"
  KPI_CSV: ".state/kpi_history.csv"
  KPI_CHART: ".state/kpi_chart.png"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else:
            pip install ccxt requests pandas matplotlib
          fi

      - name: Print preset banner
        run: |
          echo "================ RISK-ON PRESET ================"
          echo "DRY_RUN=${{ inputs.DRY_RUN }}"
          echo "RESERVE_CASH_PCT=${{ env.RESERVE_CASH_PCT }}%"
          echo "UNIVERSE_MIN_USD_VOL=${{ env.UNIVERSE_MIN_USD_VOL }}"
          echo "UNIVERSE_TOP_K=${{ env.UNIVERSE_TOP_K }}"
          echo "MAX_POSITIONS=${{ env.MAX_POSITIONS }}"
          echo "MAX_BUYS_PER_RUN=${{ env.MAX_BUYS_PER_RUN }}"
          echo "================================================"

      - name: Run Bot
        env:
          DRY_RUN: ${{ inputs.DRY_RUN }}
          # Prefer KRAKEN_*; fall back to existing CCXT_* secrets
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY || secrets.CCXT_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET || secrets.CCXT_API_SECRET }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python -u tools/safe_runner.py

      - name: Build KPI chart (if present)
        run: |
          if [ -f tools/make_kpi_chart.py ] && [ -f "${{ env.KPI_CSV }}" ]; then
            python tools/make_kpi_chart.py "${{ env.KPI_CSV }}" "${{ env.KPI_CHART }}" || true
          else:
            echo "KPI chart script or CSV not found; skipping."
          fi

      - name: Upload .state artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: riskon-state-${{ github.run_id }}
          path: |
            .state/**
            !.state/**/*.tmp
          if-no-files-found: warn

      - name: Upload logs (best-effort)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: riskon-logs-${{ github.run_id }}
          path: |
            logs/**
          if-no-files-found: ignore
