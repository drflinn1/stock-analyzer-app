name: üü¢ Crypto Live ‚Äî RISK-ON (every 5m)

on:
  schedule:
    - cron: "*/5 * * * *"
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'ON = simulate, OFF = live'
        required: false
        default: 'ON'

env:
  RUN_SWITCH: "ON"
  DRY_RUN: ${{ inputs.DRY_RUN || 'ON' }}

  # Baseline guards (can be overridden by baseline file)
  UNIVERSE_TOP_K: "25"
  MAX_POSITIONS: "3"
  MAX_BUYS_PER_RUN: "1"
  RESERVE_CASH_PCT: "5"
  ROTATE_WHEN_FULL: "true"
  ROTATE_WHEN_CASH_SHORT: "true"
  MIN_BUY_USD: "10"
  MIN_SELL_USD: "10"
  DUST_MIN_USD: "2"
  DUST_SKIP_STABLES: "true"

  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
  KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

jobs:
  live_riskon:
    name: ‚ñ∂Ô∏è Run RISK-ON loop
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: üß© Checkout repo
        uses: actions/checkout@v4

      # <<< NEW: auto-load baseline guard-pack if .state/baseline_config.json exists >>>
      - name: üîΩ Load baseline guard-pack (if present)
        if: ${{ hashFiles('.state/baseline_config.json') != '' }}
        run: |
          echo "Loading guards from .state/baseline_config.json ..."
          python - <<'PY'
import json, os
p = '.state/baseline_config.json'
with open(p, 'r', encoding='utf-8') as f:
    data = json.load(f)
guards = (data.get('guards') or {})
env_path = os.environ['GITHUB_ENV']
with open(env_path, 'a', encoding='utf-8') as env:
    for k in [
        'UNIVERSE_TOP_K','MAX_POSITIONS','MAX_BUYS_PER_RUN',
        'ROTATE_WHEN_FULL','ROTATE_WHEN_CASH_SHORT','RESERVE_CASH_PCT',
        'MIN_SELL_USD','DUST_MIN_USD','DUST_SKIP_STABLES'
    ]:
        v = guards.get(k)
        if isinstance(v, bool):
            v = str(v).lower()
        env.write(f"{k}={v}\n")
print("Baseline guards loaded into env.")
PY

      - name: ‚öôÔ∏è Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ü§ñ Run Crypto Bot (RISK-ON)
        env:
          MODE: "CRYPTO"
        run: |
          echo "DRY_RUN=${DRY_RUN}  UNIVERSE_TOP_K=${UNIVERSE_TOP_K}  MAX_POSITIONS=${MAX_POSITIONS}  MAX_BUYS_PER_RUN=${MAX_BUYS_PER_RUN}"
          python main.py

      - name: üìä Make KPI chart (optional)
        run: |
          mkdir -p .state
          python tools/make_kpi_chart.py || true

      - name: üì§ Upload artifacts (.state)
        uses: actions/upload-artifact@v4
        with:
          name: crypto-live-riskon-state
          path: .state

      - name: üì° Slack Notify (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          msg="RISK-ON run finished. DRY_RUN=${DRY_RUN} | TOP_K=${UNIVERSE_TOP_K} | MAX_POSITIONS=${MAX_POSITIONS}"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$msg\"}" \
            $SLACK_WEBHOOK_URL
