name: Crypto Live Overnight (LIVE, Sept Baseline)

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "ON or OFF (overrides default) â€” OFF = live"
        required: false
        default: "OFF"
      RUN_BOT:
        description: "ON to run bot (OFF to only render KPI/artifacts)"
        required: false
        default: "ON"

concurrency:
  group: crypto-live
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      # Behavior toggles
      DRY_RUN: ${{ inputs.DRY_RUN || 'OFF' }}
      RUN_BOT: ${{ inputs.RUN_BOT || 'ON' }}

      # Exchange
      EXCHANGE: kraken

      # Repo variables (safe wideners)
      MIN_BUY_USD:       ${{ vars.MIN_BUY_USD || '18' }}
      MAX_POSITIONS:     ${{ vars.MAX_POSITIONS || '3' }}
      MAX_BUYS_PER_RUN:  ${{ vars.MAX_BUYS_PER_RUN || '2' }}
      UNIVERSE_TOP_K:    ${{ vars.UNIVERSE_TOP_K || '40' }}
      RESERVE_CASH_PCT:  ${{ vars.RESERVE_CASH_PCT || '15' }}
      ROTATE_WHEN_FULL:        ${{ vars.ROTATE_WHEN_FULL || 'true' }}
      ROTATE_WHEN_CASH_SHORT:  ${{ vars.ROTATE_WHEN_CASH_SHORT || 'true' }}
      DUST_MIN_USD:      ${{ vars.DUST_MIN_USD || '2' }}
      DUST_SKIP_STABLES: ${{ vars.DUST_SKIP_STABLES || 'true' }}

      # Exit rules
      TAKE_PROFIT_PCT:   ${{ vars.TAKE_PROFIT_PCT || '3' }}
      STOP_LOSS_PCT:     ${{ vars.STOP_LOSS_PCT || '5' }}
      TRAILING_STOP_PCT: ${{ vars.TRAILING_STOP_PCT || '2' }}
      TRAILING_ARM_PCT:  ${{ vars.TRAILING_ARM_PCT || '1.5' }}

      # Restricted markets
      SKIP_RESTRICTED:   ${{ vars.SKIP_RESTRICTED || 'true' }}

      # Kraken secrets
      KRAKEN_API_KEY:    ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install ccxt pandas pyyaml matplotlib

      - name: Sanity check (no secret values shown)
        run: |
          python - << 'PY'
          import os
          echo = lambda k: print(f"{k} =", os.getenv(k, ""))
          print("Have KRAKEN_API_KEY:", bool(os.getenv("KRAKEN_API_KEY")))
          print("Have KRAKEN_API_SECRET:", bool(os.getenv("KRAKEN_API_SECRET")))
          for k in [
            "DRY_RUN","RUN_BOT","MIN_BUY_USD","MAX_POSITIONS","MAX_BUYS_PER_RUN",
            "UNIVERSE_TOP_K","RESERVE_CASH_PCT","ROTATE_WHEN_FULL","ROTATE_WHEN_CASH_SHORT",
            "DUST_MIN_USD","DUST_SKIP_STABLES","TAKE_PROFIT_PCT","STOP_LOSS_PCT",
            "TRAILING_STOP_PCT","TRAILING_ARM_PCT","SKIP_RESTRICTED"
          ]:
              echo(k)
          PY

      - name: Run Crypto Engine
        if: env.RUN_BOT == 'ON'
        run: |
          mkdir -p .state
          python main.py

      - name: Make KPI chart (optional)
        run: |
          if [ -f tools/make_kpi_chart.py ]; then
            python tools/make_kpi_chart.py --column bal_usd || true
          fi

      - name: Ensure artifact folder
        run: mkdir -p .state

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crypto-live-overnight-${{ github.run_number }}
          path: .state/*
          if-no-files-found: warn

      - name: Slack notify (optional)
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python - << 'PY'
          import json, os, pathlib, sys
          def read(p):
              try: return pathlib.Path(p).read_text(encoding="utf-8")
              except: return ""
          def read_lines(p):
              try: return pathlib.Path(p).read_text(encoding="utf-8").splitlines()
              except: return []
          flags = read_lines(".state/profit_flags.txt")
          top = flags[1] if len(flags) > 1 else "(none)"
          runlog = read_lines(".state/run.log")
          summary = runlog[-1] if runlog else ""
          payload = json.dumps({"text": f"OVERNIGHT STATUS=${{ job.status }}\nTop mover: {top}\n{summary}"})
          import urllib.request
          req = urllib.request.Request(os.environ["SLACK_WEBHOOK_URL"], data=payload.encode(), headers={"Content-Type":"application/json"})
          try:
              urllib.request.urlopen(req, timeout=10)
          except Exception as e:
              print("Slack post failed:", e, file=sys.stderr)
          PY
