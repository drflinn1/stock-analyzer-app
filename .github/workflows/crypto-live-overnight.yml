name: Crypto Live — Overnight (15m DRY-RUN by default)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "ON for simulation, OFF for live trading"
        required: true
        default: "ON"
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes (UTC)

permissions:
  contents: read

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  # ===== Runtime Vars (override in Settings → Secrets and variables → Variables) =====
  MIN_BUY_USD:         ${{ vars.MIN_BUY_USD || '10' }}
  MAX_POSITIONS:       ${{ vars.MAX_POSITIONS || '3' }}
  MAX_BUYS_PER_RUN:    ${{ vars.MAX_BUYS_PER_RUN || '1' }}
  UNIVERSE_TOP_K:      ${{ vars.UNIVERSE_TOP_K || '25' }}
  RESERVE_CASH_PCT:    ${{ vars.RESERVE_CASH_PCT || '5' }}
  DUST_MIN_USD:        ${{ vars.DUST_MIN_USD || '2' }}
  ROTATE_WHEN_FULL:    ${{ vars.ROTATE_WHEN_FULL || 'true' }}
  ROTATE_WHEN_CASH_SHORT: ${{ vars.ROTATE_WHEN_CASH_SHORT || 'true' }}

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # Map dispatch input (if any) → DRY_RUN; scheduled runs default to ON for safety
      DRY_RUN: ${{ inputs.DRY_RUN || 'OFF' }}

      # ===== Required for private API (set in Settings → Secrets and variables → Secrets) =====
      KRAKEN_API_KEY:    ${{ secrets.KRAKEN_API_KEY }}
      KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check for secrets
        run: |
          missing=0
          [ -z "${KRAKEN_API_KEY}" ]    && echo "❌ Missing secret: KRAKEN_API_KEY" && missing=1
          [ -z "${KRAKEN_API_SECRET}" ] && echo "❌ Missing secret: KRAKEN_API_SECRET" && missing=1
          if [ $missing -eq 1 ] && [ "${DRY_RUN}" = "OFF" ]; then
            echo "You set DRY_RUN=OFF but private API secrets are missing. Failing fast."
            exit 1
          fi
          echo "Secrets check complete."

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install ccxt pandas pyyaml matplotlib

      - name: Create .state directory
        run: |
          mkdir -p .state

      - name: Warm snapshots (balances/positions/buy_plan)
        run: |
          python main.py --warm-only

      - name: Run trading loop
        run: |
          echo "=== START LOOP ==="
          python main.py --loop-once
          echo "=== END LOOP ==="

      - name: Upload state artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: state_${{ github.run_number }}
          path: .state/*
          if-no-files-found: warn
          retention-days: 7
