name: Crypto Live — Overnight (15m DRY-RUN by default)

on:
  schedule:
    - cron: "*/15 * * * *"   # every 15 minutes
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: "OFF to trade live; ON for dry run"
        type: choice
        required: true
        default: "ON"
        options: ["ON", "OFF"]
      RUN_SWITCH:
        description: "Global on/off (ON runs, OFF skips trading logic)"
        type: choice
        required: true
        default: "ON"
        options: ["ON", "OFF"]
      ADVANCED_JSON:
        description: "Optional advanced config JSON (sizing, caps, etc.)"
        required: false
        type: string
      PROTECT_JSON:
        description: "Optional guard/protect JSON (TP/SL/TSL, sell rules, etc.)"
        required: false
        type: string

# Avoid overlapping runs of this workflow
concurrency:
  group: crypto-live-overnight
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  live:
    runs-on: ubuntu-latest

    env:
      # ---- Runtime toggles / defaults (vars override these if present) ----
      DRY_RUN: ${{ inputs.DRY_RUN || 'ON' }}
      RUN_SWITCH: ${{ inputs.RUN_SWITCH || 'ON' }}

      # Bot knobs (repo Variables > Actions > Variables)
      MIN_BUY_USD:            ${{ vars.MIN_BUY_USD || '10' }}
      MAX_POSITIONS:          ${{ vars.MAX_POSITIONS || '3' }}
      MAX_BUYS_PER_RUN:       ${{ vars.MAX_BUYS_PER_RUN || '1' }}
      UNIVERSE_TOP_K:         ${{ vars.UNIVERSE_TOP_K || '25' }}
      RESERVE_CASH_PCT:       ${{ vars.RESERVE_CASH_PCT || '5' }}
      ROTATE_WHEN_FULL:       ${{ vars.ROTATE_WHEN_FULL || 'true' }}
      ROTATE_WHEN_CASH_SHORT: ${{ vars.ROTATE_WHEN_CASH_SHORT || 'true' }}
      MIN_SELL_USD:           ${{ vars.MIN_SELL_USD || '10' }}
      DUST_MIN_USD:           ${{ vars.DUST_MIN_USD || '2' }}
      DUST_SKIP_STABLES:      ${{ vars.DUST_SKIP_STABLES || 'true' }}

      # Optional JSON blobs from dispatch inputs (stringified)
      ADVANCED_JSON: ${{ inputs.ADVANCED_JSON || '' }}
      PROTECT_JSON:  ${{ inputs.PROTECT_JSON  || '' }}

      # Where the bot writes state & charts
      STATE_DIR: ".state"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure .state/ exists (explicit & idempotent)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$STATE_DIR"
          # Provide a harmless sentinel so the artifact never ends up empty
          echo "created: $(date -Iseconds)" > "$STATE_DIR/ARTIFACT_SENTINEL.txt"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (requirements.txt if present, else minimal safe set)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f requirements.txt ]]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            python -m pip install --upgrade pip
            # Minimal deps used across your repo & KPI chart step
            pip install pyyaml matplotlib pandas requests
          fi

      # ---- Run the bot (your main entry) ----
      - name: Run trading bot
        id: run_bot
        shell: bash
        env:
          # Secrets must be defined in repo Settings → Secrets and variables → Actions → Secrets
          KRAKEN_API_KEY:    ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
          # Optionally Slack or email secrets if your code reads them directly
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          echo "DRY_RUN=${DRY_RUN}"
          echo "RUN_SWITCH=${RUN_SWITCH}"

          # If you gate execution on RUN_SWITCH inside Python, great—otherwise short-circuit here:
          if [[ "${RUN_SWITCH}" != "ON" ]]; then
            echo "RUN_SWITCH is OFF → skip trading logic."
            echo "skip" > "${STATE_DIR}/run_skipped.txt"
            exit 0
          fi

          # Always log a run header into .state/ for post-run inspection
          {
            echo "=== Crypto Live Run ==="
            echo "started: $(date -Iseconds)"
            echo "DRY_RUN=${DRY_RUN}"
            echo "ADVANCED_JSON length: ${#ADVANCED_JSON}"
            echo "PROTECT_JSON length: ${#PROTECT_JSON}"
          } | tee "${STATE_DIR}/run_header.txt"

          # Your entry-point; keep as-is for your repo
          # (If your file resides elsewhere, adjust the path accordingly.)
          python main.py

          echo "completed: $(date -Iseconds)" | tee -a "${STATE_DIR}/run_header.txt"

      # ---- Optional: generate KPI chart if your script exists ----
      - name: Generate KPI chart (optional)
        if: always() && hashFiles('tools/make_kpi_chart.py') != ''
        shell: bash
        run: |
          set -euo pipefail
          echo "Generating KPI chart (if CSV present)…"
          # The script should read .state/kpi_history.csv and write .state/kpi_chart.png
          python tools/make_kpi_chart.py || echo "KPI chart generation skipped/failed harmlessly."

      # ──────────────────────────────────────────────────────────────
      # ✅ Safe Artifact Upload (explicit .state/ creation + "always" upload)
      # ──────────────────────────────────────────────────────────────
      - name: Upload .state artifacts (always, even on failure)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: state-${{ github.workflow }}-${{ github.run_id }}
          path: |
            .state/**
            .state/*
            .state
          if-no-files-found: warn
          retention-days: 7
          compression-level: 6

      # (Optional) Upload a slim run-report as a separate artifact
      - name: Upload run report (optional)
        if: always() && hashFiles('.state/run_header.txt') != ''
        uses: actions/upload-artifact@v4
        with:
          name: run-report-${{ github.run_id }}
          path: .state/run_header.txt
          if-no-files-found: warn
          retention-days: 7

      # ──────────────────────────────────────────────────────────────
      # (Optional) Trade alerts step — disabled by default
      # Enable by flipping `if: ${{ false }}` to `if: ${{ env.SLACK_WEBHOOK_URL != '' }}`
      # ──────────────────────────────────────────────────────────────
      - name: (Optional) Send Slack summary
        if: ${{ false }}
        shell: bash
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          test -n "${SLACK_WEBHOOK_URL:-}" || { echo "No webhook; skipping."; exit 0; }
          msg="*Crypto Live — Overnight* finished run ${{ github.run_number }} (DRY_RUN=${DRY_RUN})"
          payload=$(jq -n --arg text "$msg" '{text:$text}')
          curl -sS -X POST -H 'Content-type: application/json' --data "${payload}" "${SLACK_WEBHOOK_URL}" || true
