name: Daily Rebalance (headless)

on:
  # Manual trigger (Run workflow button)
  workflow_dispatch:
    inputs:
      dry_run:
        description: Do not make external changes (safe test mode)
        required: false
        default: "true"

  # Auto-run ~3:55 PM New York year-round
  schedule:
    - cron: '55 19 * * 1-5'  # 3:55 PM during EDT (UTC-4)
    - cron: '55 20 * * 1-5'  # 3:55 PM during EST (UTC-5)

concurrency:
  group: rebalance
  cancel-in-progress: false

jobs:
  rebalance:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # surface email secrets to steps; empty string if not defined so we can safely skip
      EMAIL_SENDER: ${{ secrets.EMAIL_SENDER || '' }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD || '' }}
      EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER || '' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ---- Market hours guard (US/Eastern) ----
      - name: Market-hours guard (ET)
        id: market_time
        run: |
          TZ=America/New_York
          now_et=$(TZ=$TZ date +'%Y-%m-%d %H:%M:%S %Z')
          hhmm=$(TZ=$TZ date +'%H%M')
          dow=$(TZ=$TZ date +%u)  # 1=Mon ... 7=Sun

          echo "now_et=$now_et"
          echo "hhmm=$hhmm"
          echo "dow=$dow (1=Mon ... 7=Sun)"

          in_window=false
          if [ "$dow" -ge 1 ] && [ "$dow" -le 5 ]; then
            # allow a few minutes pre-open and post-close for setup/cleanup
            if [ "$hhmm" -ge 0925 ] && [ "$hhmm" -le 1610 ]; then
              in_window=true
            fi
          fi

          echo "in_window=$in_window"
          echo "in_window=$in_window" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != '' && steps.market_time.outputs.in_window == 'false') || steps.market_time.outputs.in_window == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute headless rebalance
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != '' && steps.market_time.outputs.in_window == 'false') || steps.market_time.outputs.in_window == 'true' }}
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}
        run: |
          echo "DRY_RUN=${DRY_RUN:-true}"
          python runner.py --dry-run "${DRY_RUN:-true}"

      - name: Upload signals artifact
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != '' && steps.market_time.outputs.in_window == 'false') || steps.market_time.outputs.in_window == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: signals-${{ github.run_id }}
          path: artifacts/*
          if-no-files-found: warn
          retention-days: 10

      - name: Build run summary
        if: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != '' && steps.market_time.outputs.in_window == 'false') || steps.market_time.outputs.in_window == 'true' }}
        shell: bash
        run: |
          echo "### Daily Rebalance â€“ $GITHUB_RUN_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** $GITHUB_WORKFLOW  " >> $GITHUB_STEP_SUMMARY
          echo "**Run URL:** https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}  " >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Preview of \`signals\` CSV:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```csv' >> $GITHUB_STEP_SUMMARY
          head -n 12 artifacts/signals-*.csv | sed 's/[[:space:]]*$//' >> $GITHUB_STEP_SUMMARY || echo "No CSV found." >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      # ---------- Email notification (runs even on failure) ----------
      - name: Notify by email
        if: ${{ always() }}
        env:
          SENDER: ${{ env.EMAIL_SENDER }}
          APP_PASS: ${{ env.EMAIL_PASSWORD }}
          TO: ${{ env.EMAIL_RECEIVER }}
        shell: bash
        run: |
          # Skip cleanly if secrets not configured
          if [ -z "$SENDER" ] || [ -z "$APP_PASS" ] || [ -z "$TO" ]; then
            echo "Email secrets not set; skipping notification."
            exit 0
          fi

          STATUS="${{ job.status }}"
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          PREVIEW="$(head -n 12 artifacts/signals-*.csv 2>/dev/null || echo 'No CSV found.')"

          python - <<'PY'
          import os, ssl, smtplib
          from email.message import EmailMessage

          sender = os.environ["SENDER"]
          app_pass = os.environ["APP_PASS"]
          to = os.environ["TO"]

          status = os.environ.get("STATUS", "UNKNOWN")
          run_url = os.environ.get("RUN_URL", "")
          repo = os.environ.get("GITHUB_REPOSITORY", "")
          run_num = os.environ.get("GITHUB_RUN_NUMBER", "")
          workflow = os.environ.get("GITHUB_WORKFLOW", "")
          preview = os.environ.get("PREVIEW", "")

          msg = EmailMessage()
          msg["From"] = sender
          msg["To"] = to
          msg["Subject"] = f"[{repo}] {workflow} #{run_num}: {status}"

          body = f"""Run: {workflow} #{run_num}
Repository: {repo}
Status: {status}
URL: {run_url}

Preview (signals CSV):
----------------------
{preview}
"""
          msg.set_content(body)

          context = ssl.create_default_context()
          with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as smtp:
            smtp.login(sender, app_pass)
            smtp.send_message(msg)
          PY

      - name: Skipped (outside market hours)
        if: ${{ not( (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != '' && steps.market_time.outputs.in_window == 'false') || steps.market_time.outputs.in_window == 'true' ) }}
        run: echo "Skipping heavy steps: outside US market hours."
