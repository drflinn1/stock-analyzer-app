name: Daily Rebalance (headless)

on:
  # Manual trigger (Run workflow button)
  workflow_dispatch:
    inputs:
      dry_run:
        description: Do not make external changes (safe test mode)
        required: false
        default: "true"

  # Auto-run ~3:55 PM New York year-round
  schedule:
    - cron: '55 19 * * 1-5'  # 3:55 PM during EDT (UTC-4)
    - cron: '55 20 * * 1-5'  # 3:55 PM during EST (UTC-5)

concurrency:
  group: rebalance
  cancel-in-progress: false

jobs:
  rebalance:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ---- Market hours guard (US/Eastern) ----
      - name: Market hours guard (ET)
        id: market_time
        run: |
          TZ=America/New_York
          now_et=$(TZ=$TZ date +'%Y-%m-%d %H:%M:%S %Z')
          hhmm=$(TZ=$TZ date +'%H%M')
          dow=$(TZ=$TZ date +%u)  # 1=Mon ... 7=Sun

          echo "now_et=$now_et"
          echo "hhmm=$hhmm"
          echo "dow=$dow (1=Mon ... 7=Sun)"

          # Allow a small pre/post window
          in_window=false
          if [ "$dow" -ge 1 ] && [ "$dow" -le 5 ]; then
            if [ "$hhmm" -ge 0925 ] && [ "$hhmm" -le 1610 ]; then
              in_window=true
            fi
          fi

          echo "in_window=$in_window"
          echo "in_window=$in_window" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        if: ${{ (github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute headless rebalance
        if: ${{ (github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true' }}
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}
        run: |
          echo "DRY_RUN=${DRY_RUN:-true}"
          # ✅ Correct entry point (was run.py before)
          python runner.py --dry-run "${DRY_RUN:-true}"

      - name: Upload signals artifact
        if: ${{ (github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: signals-${{ github.run_id }}
          path: artifacts/*
          if-no-files-found: warn
          retention-days: 10

      - name: Build run summary
        if: always()
        run: |
          echo "### Daily Rebalance – $GITHUB_WORKFLOW" >> $GITHUB_STEP_SUMMARY
          if ls artifacts/*.csv >/dev/null 2>&1; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Preview (CSV)**" >> $GITHUB_STEP_SUMMARY
            head -n 10 artifacts/*.csv | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_No CSV produced._" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify by email
        if: always()
        env:
          EMAIL_SENDER:   ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        shell: bash
        run: |
          python - <<'PY'
          import os, smtplib, ssl, glob
          from email.message import EmailMessage

          sender   = os.environ["EMAIL_SENDER"]
          pwd      = os.environ["EMAIL_PASSWORD"]
          to       = os.environ["EMAIL_RECEIVER"]
          subject  = f"[Rebalance] {os.environ.get('GITHUB_WORKFLOW','run')} – {os.environ.get('GITHUB_RUN_NUMBER','')}"
          run_url  = f"{os.environ.get('GITHUB_SERVER_URL')}/{os.environ.get('GITHUB_REPOSITORY')}/actions/runs/{os.environ.get('GITHUB_RUN_ID')}"

          # Body
          lines = [f"Workflow: {os.environ.get('GITHUB_WORKFLOW')}",
                   f"Run URL:  {run_url}",
                   ""]
          # Attach latest CSV if present
          msg = EmailMessage()
          msg["From"], msg["To"], msg["Subject"] = sender, to, subject
          csvs = sorted(glob.glob("artifacts/*.csv"))
          if csvs:
            with open(csvs[-1], "rb") as f:
              data = f.read()
            msg.add_attachment(data, maintype="text", subtype="csv",
                               filename=os.path.basename(csvs[-1]))
            lines.append("Attached: signals CSV")
          else:
            lines.append("No CSV produced.")

          msg.set_content("\n".join(lines))

          ctx = ssl.create_default_context()
          with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=ctx) as s:
            s.login(sender, pwd)
            s.send_message(msg)
          PY

      - name: Skipped (outside market hours)
        if: ${{ not((github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true') }}
        run: echo "Skipping heavy steps: outside US market hours."
