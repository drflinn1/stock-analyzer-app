name: Daily Rebalance (headless)

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Do not make external changes (safe test mode)
        required: false
        default: "true"
  schedule:
    - cron: "55 19 * * 1-5"  # 3:55 PM during EDT (UTC-4)
    - cron: "55 20 * * 1-5"  # 3:55 PM during EST (UTC-5)

concurrency:
  group: rebalance
  cancel-in-progress: false

jobs:
  rebalance:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ---- Market hours guard (US/Eastern) ----
      - name: Market-hours guard (ET)
        id: market_time
        shell: bash
        run: |
          TZ=America/New_York
          now_et=$(TZ=$TZ date +'%Y-%m-%d %H:%M:%S %Z')
          hhmm=$(TZ=$TZ date +'%H%M')
          dow=$(TZ=$TZ date +%u)  # 1=Mon ... 7=Sun

          echo "now_et=$now_et"
          echo "hhmm=$hhmm"
          echo "dow=$dow (1=Mon ... 7=Sun)"

          in_window=false
          if [ "$dow" -ge 1 ] && [ "$dow" -le 5 ]; then
            # allow a few minutes pre-open and post-close for setup/cleanup
            if [ "$hhmm" -ge 0925 ] && [ "$hhmm" -le 1610 ]; then
              in_window=true
            fi
          fi

          echo "in_window=$in_window" >> "$GITHUB_OUTPUT"

      - name: Install dependencies
        if: ${{ (github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute headless rebalance
        if: ${{ (github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true' }}
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}
        run: |
          echo "DRY_RUN=${DRY_RUN:-true}"
          python runner.py --dry-run "${DRY_RUN:-true}"

      - name: Upload signals artifact
        if: ${{ (github.event_name == 'workflow_dispatch') || steps.market_time.outputs.in_window == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: signals-${{ github.run_id }}
          path: artifacts/*
          if-no-files-found: warn
          retention-days: 10

      - name: Build run summary
        if: always()
        shell: bash
        run: |
          echo "### Daily Rebalance – $GITHUB_RUN_NUMBER" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Workflow:** $GITHUB_WORKFLOW" >> "$GITHUB_STEP_SUMMARY"
          echo "**Run URL:** $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$GITHUB_STEP_SUMMARY"
          if ls artifacts/*.csv >/dev/null 2>&1; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Preview of \`signals\` CSV:" >> "$GITHUB_STEP_SUMMARY"
            echo '```csv' >> "$GITHUB_STEP_SUMMARY"
            head -n 15 artifacts/*.csv >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Notify by email
        if: always()
        env:
          EMAIL_SENDER:   ${{ secrets.EMAIL_SENDER }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_RECEIVER: ${{ secrets.EMAIL_RECEIVER }}
        shell: bash
        run: |
          python - <<'PY'
          import os, glob, mimetypes, smtplib, ssl
          from email.message import EmailMessage

          sender   = os.environ.get("EMAIL_SENDER", "")
          passwd   = os.environ.get("EMAIL_PASSWORD", "")
          receiver = os.environ.get("EMAIL_RECEIVER", "")

          if not (sender and passwd and receiver):
              print("Email secrets missing; skipping send.")
              raise SystemExit(0)

          run_url = f"{os.environ.get('GITHUB_SERVER_URL')}/{os.environ.get('GITHUB_REPOSITORY')}/actions/runs/{os.environ.get('GITHUB_RUN_ID')}"
          subject = f"Rebalance #{os.environ.get('GITHUB_RUN_NUMBER')} – {os.environ.get('GITHUB_WORKFLOW')}"

          body_lines = [
              f"Workflow: {os.environ.get('GITHUB_WORKFLOW')}",
              f"Run URL : {run_url}",
          ]
          body = "\n".join(body_lines)

          msg = EmailMessage()
          msg["From"] = sender
          msg["To"] = receiver
          msg["Subject"] = subject
          msg.set_content(body)

          # Attach first CSV or JSON if present
          for pattern in ("artifacts/*.csv", "artifacts/*.json"):
              files = glob.glob(pattern)
              if files:
                  path = files[0]
                  ctype, _ = mimetypes.guess_type(path)
                  if ctype is None:
                      ctype = "application/octet-stream"
                  maintype, subtype = ctype.split("/", 1)
                  with open(path, "rb") as f:
                      msg.add_attachment(
                          f.read(), maintype=maintype, subtype=subtype,
                          filename=os.path.basename(path)
                      )
                  break

          context = ssl.create_default_context()
          with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as s:
              s.login(sender, passwd)
              s.send_message(msg)
          print("Email sent.")
          PY
