name: Daily Rebalance (headless)

on:
  # Manual trigger (Run workflow button)
  workflow_dispatch:
    inputs:
      dry_run:
        description: Do not make external changes (safe test mode)
        required: false
        default: "true"

  # Auto-run ~3:55 PM New York year-round
  schedule:
    - cron: '55 19 * * 1-5'  # 3:55 PM during EDT (UTC-4)
    - cron: '55 20 * * 1-5'  # 3:55 PM during EST (UTC-5)

concurrency:
  group: rebalance
  cancel-in-progress: false

jobs:
  rebalance:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ---- Market hours guard (US/Eastern) ----
      - name: Market-hours guard (ET)
        run: |
          TZ=America/New_York
          now_et=$(TZ=$TZ date +'%Y-%m-%d %H:%M:%S %Z')
          hhmm=$(TZ=$TZ date +'%H%M')
          dow=$(TZ=$TZ date +%u)  # 1=Mon ... 7=Sun

          echo "now_et=$now_et"
          echo "hhmm=$hhmm"
          echo "dow=$dow (1=Mon ... 7=Sun)"

          # Only Mon–Fri, and roughly regular US market hours
          if [ "$dow" -lt 1 ] || [ "$dow" -gt 5 ]; then
            echo "Outside weekdays → exiting 0"; exit 0
          fi
          if [ "$hhmm" -lt 0925 ] || [ "$hhmm" -gt 1610 ]; then
            echo "Outside 09:25–16:10 ET window → exiting 0"; exit 0
          fi
          echo "Inside market window → continuing"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute headless rebalance
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run || 'true' }}
        run: |
          echo "DRY_RUN=${DRY_RUN:-true}"
          python runner.py --dry-run "${DRY_RUN:-true}"

      # Write a brief markdown summary so GitHub’s email has useful context
      - name: Build run summary
        if: always()
        run: |
          echo "## Daily Rebalance summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- Event: \`${{ github.event_name }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Branch: \`${{ github.ref_name }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Status: **${{ job.status }}**" >> "$GITHUB_STEP_SUMMARY"
          latest_csv=$(ls -1 artifacts/*.csv 2>/dev/null | tail -n1 || true)
          latest_json=$(ls -1 artifacts/*.json 2>/dev/null | tail -n1 || true)
          if [ -n "$latest_csv" ] || [ -n "$latest_json" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Artifacts generated:" >> "$GITHUB_STEP_SUMMARY"
            [ -n "$latest_csv" ]  && echo "- \`$latest_csv\`"  >> "$GITHUB_STEP_SUMMARY"
            [ -n "$latest_json" ] && echo "- \`$latest_json\`" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload signals artifact
        uses: actions/upload-artifact@v4
        with:
          name: signals-${{ github.run_id }}
          path: artifacts/*
          if-no-files-found: warn
          retention-days: 10

      # Final line that will also show up in GitHub’s email
      - name: Post summary status
        if: always()
        run: echo "Run completed with status: ${{ job.status }}"
