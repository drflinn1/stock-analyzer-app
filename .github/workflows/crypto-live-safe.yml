name: Crypto Live — SAFE

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'ON = simulate, OFF = live'
        required: false
        default: 'ON'

env:
  RUN_SWITCH: "ON"
  DRY_RUN: ${{ inputs.DRY_RUN || 'ON' }}

  # Conservative defaults (baseline-like)
  MIN_BUY_USD: "10"
  MAX_BUYS_PER_RUN: "1"
  MAX_POSITIONS: "1"
  UNIVERSE_TOP_K: "25"
  RESERVE_CASH_PCT: "5"
  ROTATE_WHEN_FULL: "false"
  ROTATE_WHEN_CASH_SHORT: "true"
  MIN_SELL_USD: "10"
  DUST_MIN_USD: "2"
  DUST_SKIP_STABLES: "true"

  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
  KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

jobs:
  live_safe:
    name: Run SAFE manual test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download baseline artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: crypto-reset-state
          path: .state
        continue-on-error: true

      - name: Ensure baseline guard-pack file
        shell: python
        run: |
          import json, os, pathlib
          def to_bool(x, default=False):
              if x is None: return default
              return str(x).strip().lower() in {"1","true","yes","on"}
          state = pathlib.Path(".state"); state.mkdir(parents=True, exist_ok=True)
          f = state / "baseline_config.json"
          if not f.exists():
              guards = {
                  "UNIVERSE_TOP_K": int(os.getenv("UNIVERSE_TOP_K","25")),
                  "MAX_POSITIONS": int(os.getenv("MAX_POSITIONS","1")),
                  "MAX_BUYS_PER_RUN": int(os.getenv("MAX_BUYS_PER_RUN","1")),
                  "ROTATE_WHEN_FULL": to_bool(os.getenv("ROTATE_WHEN_FULL","false")),
                  "ROTATE_WHEN_CASH_SHORT": to_bool(os.getenv("ROTATE_WHEN_CASH_SHORT","true"), True),
                  "RESERVE_CASH_PCT": float(os.getenv("RESERVE_CASH_PCT","5")),
                  "MIN_SELL_USD": float(os.getenv("MIN_SELL_USD","10")),
                  "DUST_MIN_USD": float(os.getenv("DUST_MIN_USD","2")),
                  "DUST_SKIP_STABLES": to_bool(os.getenv("DUST_SKIP_STABLES","true"), True),
              }
              data = {"label":"Fallback Baseline (from env)","guards":guards}
              with f.open("w", encoding="utf-8") as w: json.dump(data, w, indent=2)
              print("Wrote fallback baseline_config.json")
          else:
              print("Found baseline_config.json from artifact")

      - name: Load baseline guard-pack
        if: ${{ hashFiles('.state/baseline_config.json') != '' }}
        shell: python
        run: |
          import json, os
          with open(".state/baseline_config.json","r",encoding="utf-8") as f:
              guards = (json.load(f).get("guards") or {})
          with open(os.environ["GITHUB_ENV"],"a",encoding="utf-8") as env:
              for k in ["UNIVERSE_TOP_K","MAX_POSITIONS","MAX_BUYS_PER_RUN",
                        "ROTATE_WHEN_FULL","ROTATE_WHEN_CASH_SHORT","RESERVE_CASH_PCT",
                        "MIN_SELL_USD","DUST_MIN_USD","DUST_SKIP_STABLES"]:
                  v = guards.get(k)
                  if isinstance(v,bool): v = str(v).lower()
                  env.write(f"{k}={v}\n")
          print("Baseline guards loaded into env.")

      # ✅ FIXED: proper indentation and shell for
