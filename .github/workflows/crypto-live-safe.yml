name: Crypto Live — Safe Baseline (every 5m, NEW)

on:
  workflow_dispatch:
    inputs:
      MASTER_SWITCH:
        description: "Master switch (true = allow run)"
        type: choice
        options: ["true","false"]
        default: "true"
      SIM_MODE:
        description: "Sim mode (true = DRY_RUN ON)"
        type: choice
        options: ["true","false"]
        default: "true"
      REQUIRE_RISK_ON:
        description: "Run only when risk is ON?"
        type: choice
        options: ["IGNORE","REQUIRE_ON"]
        default: "IGNORE"
  schedule:
    - cron: "*/5 * * * *"

concurrency:
  group: crypto-live-safe
  cancel-in-progress: false

env:
  # Map inputs to the ON/OFF strings your bot expects
  RUN_SWITCH: ${{ (inputs.MASTER_SWITCH || 'true') == 'true' && 'ON' || 'OFF' }}
  DRY_RUN:    ${{ (inputs.SIM_MODE      || 'true') == 'true' && 'ON' || 'OFF' }}
  REQUIRE_RISK_ON: ${{ inputs.REQUIRE_RISK_ON || 'IGNORE' }}

  # Bot knobs (from repo Variables if present)
  MIN_BUY_USD:            ${{ vars.MIN_BUY_USD || '10' }}
  RESERVE_CASH_PCT:       ${{ vars.RESERVE_CASH_PCT || '5' }}
  MAX_POSITIONS:          ${{ vars.MAX_POSITIONS || '3' }}
  MAX_BUYS_PER_RUN:       ${{ vars.MAX_BUYS_PER_RUN || '2' }}
  UNIVERSE_TOP_K:         ${{ vars.UNIVERSE_TOP_K || '25' }}
  ROTATE_WHEN_FULL:       ${{ vars.ROTATE_WHEN_FULL || 'true' }}
  ROTATE_WHEN_CASH_SHORT: ${{ vars.ROTATE_WHEN_CASH_SHORT || 'true' }}

  # Optional universe filters you already keep as Variables
  AUTO_MIN_USD_VOL:       ${{ vars.AUTO_MIN_USD_VOL || '500000' }}
  AUTO_MIN_PRICE:         ${{ vars.AUTO_MIN_PRICE   || '0.02' }}
  AUTO_EXCLUDE:           ${{ vars.AUTO_EXCLUDE     || '' }}
  CRYPTO_EXCHANGE:        ${{ vars.CRYPTO_EXCHANGE  || 'kraken' }}

jobs:
  live:
    name: Live Crypto Loop
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show effective knobs
        run: |
          echo "RUN_SWITCH=${RUN_SWITCH}"
          echo "DRY_RUN=${DRY_RUN}"
          echo "REQUIRE_RISK_ON=${REQUIRE_RISK_ON}"
          echo "MIN_BUY_USD=${MIN_BUY_USD}"
          echo "RESERVE_CASH_PCT=${RESERVE_CASH_PCT}"
          echo "MAX_POSITIONS=${MAX_POSITIONS}"
          echo "MAX_BUYS_PER_RUN=${MAX_BUYS_PER_RUN}"
          echo "UNIVERSE_TOP_K=${UNIVERSE_TOP_K}"
          echo "AUTO_MIN_USD_VOL=${AUTO_MIN_USD_VOL}"
          echo "AUTO_MIN_PRICE=${AUTO_MIN_PRICE}"
          echo "AUTO_EXCLUDE=${AUTO_EXCLUDE}"
          echo "CRYPTO_EXCHANGE=${CRYPTO_EXCHANGE}"
          echo "ROTATE_WHEN_FULL=${ROTATE_WHEN_FULL}"
          echo "ROTATE_WHEN_CASH_SHORT=${ROTATE_WHEN_CASH_SHORT}"

      - name: Master switch gate
        shell: bash
        run: |
          if [[ "${RUN_SWITCH}" != "ON" ]]; then
            echo "Master switch is OFF → exiting gracefully."
            exit 0
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (best effort)
        shell: bash
        run: |
          set -e
          if [[ -f "requirements.txt" ]]; then
            python -m pip install --upgrade pip
            pip install -r requirements.txt
          else
            python -m pip install --upgrade pip || true
            pip install pandas numpy matplotlib requests ccxt || true
          fi

      - name: Risk gate (REQUIRE_ON)
        shell: bash
        run: |
          if [[ "${REQUIRE_RISK_ON}" == "REQUIRE_ON" ]]; then
            SIG="UNKNOWN"
            if [[ -f ".state/last_risk_signal.txt" ]]; then
              SIG=$(cat .state/last_risk_signal.txt | tr -d '\r\n' | tr '[:lower:]' '[:upper:]')
            fi
            echo "Last risk signal = ${SIG}"
            if [[ "${SIG}" != "ON" ]]; then
              echo "Risk is not ON → skipping trading loop gracefully."
              exit 0
            fi
          fi

      # --- NEW: exchange key preflight (won't print secrets) --------------
      - name: Preflight — exchange keys present?
        shell: bash
        env:
          KRAKEN_API_KEY:    ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
        run: |
          set -e
          EX="${CRYPTO_EXCHANGE:-kraken}"
          echo "Exchange=${EX}"
          if [[ "$EX" == "kraken" ]]; then
            if [[ -n "${KRAKEN_API_KEY}" && -n "${KRAKEN_API_SECRET}" ]]; then
              echo "Kraken keys: present"
            else
              echo "Kraken keys: MISSING"
              echo "To fix: add repo secrets KRAKEN_API_KEY and KRAKEN_API_SECRET."
              exit 1
            fi
          fi

      - name: Run bot
        shell: bash
        env:
          # pass secrets (for ccxt) and knobs (for your bot)
          KRAKEN_API_KEY:    ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

          RUN_SWITCH: ${{ env.RUN_SWITCH }}
          DRY_RUN: ${{ env.DRY_RUN }}
          REQUIRE_RISK_ON: ${{ env.REQUIRE_RISK_ON }}

          MIN_BUY_USD: ${{ env.MIN_BUY_USD }}
          RESERVE_CASH_PCT: ${{ env.RESERVE_CASH_PCT }}
          MAX_POSITIONS: ${{ env.MAX_POSITIONS }}
          MAX_BUYS_PER_RUN: ${{ env.MAX_BUYS_PER_RUN }}
          UNIVERSE_TOP_K: ${{ env.UNIVERSE_TOP_K }}
          AUTO_MIN_USD_VOL: ${{ env.AUTO_MIN_USD_VOL }}
          AUTO_MIN_PRICE: ${{ env.AUTO_MIN_PRICE }}
          AUTO_EXCLUDE: ${{ env.AUTO_EXCLUDE }}
          CRYPTO_EXCHANGE: ${{ env.CRYPTO_EXCHANGE }}
          ROTATE_WHEN_FULL: ${{ env.ROTATE_WHEN_FULL }}
          ROTATE_WHEN_CASH_SHORT: ${{ env.ROTATE_WHEN_CASH_SHORT }}
        run: |
          set -e
          echo "Starting bot… (DRY_RUN=${DRY_RUN})"
          if [[ -f "main.py" ]]; then
            python main.py
          elif [[ -f "trader/crypto_engine.py" ]]; then
            python trader/crypto_engine.py
          else
            echo "No known entrypoint found; proceeding with fallback state generation."
          fi

      - name: Print quick .state summary
        if: always()
        shell: bash
        run: |
          echo "----- .state summary (first lines) -----"
          if [[ -f ".state/run_summary.txt" ]]; then
            echo "[run_summary.txt]"; head -n 50 .state/run_summary.txt || true
          fi
          if [[ -f ".state/positions.json" ]]; then
            echo "[positions.json]"; head -n 50 .state/positions.json || true
          fi
          if [[ -f ".state/kpi_history.csv" ]]; then
            echo "[kpi_history.csv]"; head -n 5 .state/kpi_history.csv || true
          fi
          if [[ -f ".state/why_no_trade.txt" ]]; then
            echo "[why_no_trade.txt]"; cat .state/why_no_trade.txt || true
          fi
          echo "----------------------------------------"

      - name: Ensure minimal .state snapshot (even if no positions)
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p .state
          echo "RUN_ID=${{ github.run_id }}" > .state/run_summary.txt
          echo "UTC=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> .state/run_summary.txt
          echo "DRY_RUN=${DRY_RUN}" >> .state/run_summary.txt
          [[ -f ".state/positions.json" ]] || echo '{"positions":[],"note":"empty or no open positions at time of snapshot"}' > .state/positions.json
          [[ -f ".state/kpi_history.csv" ]] || echo "ts_utc,equity,realized_pl,unrealized_pl,notes" > .state/kpi_history.csv
          [[ -f ".state/last_risk_signal.txt" ]] || echo "ON" > .state/last_risk_signal.txt

      - name: Flush .state to disk
        if: always()
        shell: bash
        run: |
          sync || true
          sleep 1

      - name: Verify .state folder contents
        if: always()
        shell: bash
        run: |
          echo "Listing .state before archiving:"
          if [[ -d ".state" ]]; then
            ls -alh .state || true
          else
            echo "(no .state directory)"
          fi
          echo "-------------------------------------"

      - name: Create .state archive
        if: always()
        shell: bash
        run: |
          set -e
          if [[ -d ".state" ]] && [[ $(ls -A .state 2>/dev/null | wc -l) -gt 0 ]]; then
            tar -czf crypto-state_${{ github.run_id }}.tar.gz .state
            echo "Archive created:"; ls -lh crypto-state_${{ github.run_id }}.tar.gz
          else
            echo "⚠️  .state is missing or empty — no archive will be created."
            echo "No .state contents for run ${{ github.run_id }}" > EMPTY_STATE_NOTE.txt
          fi

      - name: Upload .state archive (if present)
        if: always() && hashFiles('crypto-state_${{ github.run_id }}.tar.gz') != ''
        uses: actions/upload-artifact@v4
        with:
          name: crypto-state_${{ github.run_id }}
          path: crypto-state_${{ github.run_id }}.tar.gz
          if-no-files-found: ignore

      - name: Upload empty-state note (if archive missing)
        if: always() && hashFiles('crypto-state_${{ github.run_id }}.tar.gz') == ''
        uses: actions/upload-artifact@v4
        with:
          name: crypto-state_${{ github.run_id }}_EMPTY
          path: EMPTY_STATE_NOTE.txt
          if-no-files-found: ignore
