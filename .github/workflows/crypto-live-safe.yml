name: 🔴 Crypto Live — SAFE (manual $10 test)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        description: 'ON = simulate, OFF = live'
        required: false
        default: 'ON'

env:
  # Conservative test defaults (these mirror your Sept. baseline)
  RUN_SWITCH: "ON"
  DRY_RUN: ${{ inputs.DRY_RUN || 'ON' }}

  MIN_BUY_USD: "10"
  MAX_BUYS_PER_RUN: "1"
  MAX_POSITIONS: "1"

  UNIVERSE_TOP_K: "25"
  RESERVE_CASH_PCT: "5"
  ROTATE_WHEN_FULL: "false"
  ROTATE_WHEN_CASH_SHORT: "true"
  MIN_SELL_USD: "10"
  DUST_MIN_USD: "2"
  DUST_SKIP_STABLES: "true"

  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
  KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}

jobs:
  live_safe:
    name: ▶️ Run SAFE manual test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 🧩 Checkout repo
        uses: actions/checkout@v4

      # 1) Try to pull baseline from the RESET run's artifact
      - name: ⬇️ Download baseline artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: crypto-reset-state
          path: .state
        continue-on-error: true

      # 2) If artifact wasn't found, write a baseline from current env
      - name: 🧱 Fallback: write baseline from env (only if missing)
        run: |
          mkdir -p .state
          if [ ! -f ".state/baseline_config.json" ]; then
            echo "No baseline artifact found; writing fallback baseline from env..."
            cat > .state/baseline_config.json <<JSON
            {
              "label": "Fallback Baseline (from env)",
              "guards": {
                "UNIVERSE_TOP_K": ${UNIVERSE_TOP_K},
                "MAX_POSITIONS": ${MAX_POSITIONS},
                "MAX_BUYS_PER_RUN": ${MAX_BUYS_PER_RUN:-1},
                "ROTATE_WHEN_FULL": ${ROTATE_WHEN_FULL},
                "ROTATE_WHEN_CASH_SHORT": ${ROTATE_WHEN_CASH_SHORT},
                "RESERVE_CASH_PCT": ${RESERVE_CASH_PCT},
                "MIN_SELL_USD": ${MIN_SELL_USD},
                "DUST_MIN_USD": ${DUST_MIN_USD},
                "DUST_SKIP_STABLES": ${DUST_SKIP_STABLES}
              }
            }
            JSON
          fi
          ls -al .state || true

      # 3) Load baseline guard-pack into env
      - name: 🔽 Load baseline guard-pack
        if: ${{ hashFiles('.state/baseline_config.json') != '' }}
        run: |
          python - <<'PY'
import json, os
with open('.state/baseline_config.json','r',encoding='utf-8') as f:
    guards=(json.load(f).get('guards') or {})
with open(os.environ['GITHUB_ENV'],'a',encoding='utf-8') as env:
    for k in ['UNIVERSE_TOP_K','MAX_POSITIONS','MAX_BUYS_PER_RUN',
              'ROTATE_WHEN_FULL','ROTATE_WHEN_CASH_SHORT','RESERVE_CASH_PCT',
              'MIN_SELL_USD','DUST_MIN_USD','DUST_SKIP_STABLES']:
        v=guards.get(k)
        if isinstance(v,bool): v=str(v).lower()
        env.write(f"{k}={v}\n")
print("Baseline guards loaded.")
PY

      - name: ⚙️ Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🤖 Run Crypto Bot (SAFE)
        env:
          MODE: "CRYPTO"
        run: |
          echo "DRY_RUN=${DRY_RUN}  UNIVERSE_TOP_K=${UNIVERSE_TOP_K}  MAX_POSITIONS=${MAX_POSITIONS}  MAX_BUYS_PER_RUN=${MAX_BUYS_PER_RUN}"
          python main.py

      - name: 📊 Make KPI chart (optional)
        run: |
          mkdir -p .state
          python tools/make_kpi_chart.py || true

      - name: 📤 Upload artifacts (.state)
        uses: actions/upload-artifact@v4
        with:
          name: crypto-live-safe-state
          path: .state

      - name: 📡 Slack Notify (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          msg="SAFE run finished. DRY_RUN=${DRY_RUN} | TOP_K=${UNIVERSE_TOP_K} | MAX_POS=${MAX_POSITIONS}"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$msg\"}" \
            $SLACK_WEBHOOK_URL
