name: Sell Tester (On-demand, safe)

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:               { description: "Dry run (no real orders)?", required: true, default: "false" }
      TAKE_PROFIT_PCT:       { description: "Temp TP % (e.g., 0.5)", required: true, default: "0.5" }
      TRAILING_ACTIVATE_PCT: { description: "Temp trailing activation % (e.g., 0.4)", required: true, default: "0.4" }
      TRAILING_DELTA_PCT:    { description: "Temp trailing pullback % (e.g., 0.2)", required: true, default: "0.2" }
      STOP_LOSS_PCT:         { description: "Temp stop-loss % (0 = disabled)", required: true, default: "0" }
      SELL_DEBUG:            { description: "Verbose sell checks? 1=yes, 0=no", required: true, default: "1" }
      TEMP_ATR_STOP_MULT:    { description: "Override ATR stop mult for this run (e.g., 1.0)", required: true, default: "1.0" }

permissions: { contents: read }
concurrency: { group: sell-tester, cancel-in-progress: false }

env:
  MARKET: "CRYPTO"
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  EXCHANGE: "kraken"
  MODE: "live"

  # === Tax ===
  TAX_RESERVE_RATE: "0.30"
  STATE_TAX_RATE:  "0.00"

  # === Adaptive exits (ATR) ===
  ATR_EXITS: "1"
  ATR_PERIOD: "14"
  ATR_TP_MULT: "1.5"
  ATR_TRAIL_MULT: "1.0"
  ATR_ACT_MULT: "0.8"
  ATR_STOP_MULT: "1.2"    # default; overridden per run below

  # === Percent fallback (if ATR_EXITS=0) ===
  TAKE_PROFIT_PCT: "2.0"
  TRAILING_ACTIVATE_PCT: "1.0"
  TRAILING_DELTA_PCT: "1.0"
  STOP_LOSS_PCT: "0"

  # === Entry guard (EMA/RSI) ===
  ENTRY_GUARD: "1"
  ENTRY_EMA_SHORT: "9"
  ENTRY_EMA_LONG: "21"
  ENTRY_RSI_PERIOD: "14"
  ENTRY_RSI_MIN: "50"
  ENTRY_RSI_MAX: "75"

  TIMEFRAME: "5m"

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Restore .state and data caches
        id: restore
        uses: actions/cache/restore@v4
        with:
          path: |
            .state
            data
          key: state-${{ github.ref_name }}-v1

      - name: Show restored state
        run: |
          echo "cache-hit=${{ steps.restore.outputs['cache-hit'] }}"
          ls -la .state || true
          test -f .state/positions.json && echo "[OK] positions.json present" || echo "[MISS] positions.json MISSING"

      - name: Install deps
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Apply temporary sell thresholds + debug (SELLS ONLY)
        run: |
          echo "DRY_RUN=${{ github.event.inputs.DRY_RUN }}" >> $GITHUB_ENV
          echo "TAKE_PROFIT_PCT=${{ github.event.inputs.TAKE_PROFIT_PCT }}" >> $GITHUB_ENV
          echo "TRAILING_ACTIVATE_PCT=${{ github.event.inputs.TRAILING_ACTIVATE_PCT }}" >> $GITHUB_ENV
          echo "TRAILING_DELTA_PCT=${{ github.event.inputs.TRAILING_DELTA_PCT }}" >> $GITHUB_ENV
          echo "STOP_LOSS_PCT=${{ github.event.inputs.STOP_LOSS_PCT }}" >> $GITHUB_ENV
          echo "SELL_DEBUG=${{ github.event.inputs.SELL_DEBUG }}" >> $GITHUB_ENV

          # Tighten ATR stop for this test run
          echo "ATR_STOP_MULT=${{ github.event.inputs.TEMP_ATR_STOP_MULT }}" >> $GITHUB_ENV

          # Sells-only: zero the daily buy budget
          echo "DAILY_CAP_USD=0" >> $GITHUB_ENV

      - name: Run trader (sell test only)
        env:
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY }}
          KRAKEN_API_SECRET: ${{ secrets.KRAKEN_API_SECRET }}
        run: |
          mkdir -p .state data
          python -u main.py | tee -a sell_test.log

      - name: Save caches back (best-effort)
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            .state
            data
          key: state-${{ github.ref_name }}-v1
